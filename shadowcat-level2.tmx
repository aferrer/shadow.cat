<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx14.dtd">
<tmx version="1.4">
  <header
    creationtool="OmegaT"
    creationtoolversion="1.8.1_2"
    segtype="sentence"
    o-tmf="OmegaT TMX"
    adminlang="EN-US"
    srclang="EN-US"
    datatype="plaintext"
  >
  </header>
  <body>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Linux Magazine Column 94 (Jun 2007)</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Columna 94 del Linux Magazine (juny de 2007)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>[suggested title: ``The Moose is Flying (part 1)'']</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>[títol suggerit: «El Moose està volant (1a part)»]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Perl's object system is very ``flexible'', meaning, you get to build it from the ground up.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>El sistema d'objectes de Perl és molt «flexible», és a dir, es construeix de baix cap a dalt.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can build traditional hash-based objects, or more exotic array-based or inside-out objects.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Podeu construir objectes tradicionals basats en taules de dispersió, o objectes més exòtics basats en matrius o objectes capgirats.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And then you have to create the accessors, define access policies, and perform a lot of repetitive code.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Aleshores heu de crear els mètodes accessors, definir les polítiques d'accés i generar un munt de codi repetit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Luckily, Perl is introspective enough that you can get Perl to do most of the hard boring work.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Afortunadament, Perl és prou introspectiu com perquè li encomaneu la majoria del treball dur i avorrit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This has resulted in a number of ``class frameworks'' finding their way onto the CPAN.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Això ha provocat que un bon nombre «d'entorns de treball per a classes» hagin estat publicats al CPAN.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i='0' x='0'>&lt;c0&gt;</bpt>Moose<ept i='0'>&lt;/c0&gt;</ept> framework appeared about a year ago, and I initially dismissed it as ``yet another class framework'', much in the same way as I feel about yet another templating system or object-relational mapper.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>L'enton de treball <bpt i='0' x='0'>&lt;c0&gt;</bpt>Moose<ept i='0'>&lt;/c0&gt;</ept> va sorgir fa un any i inicialment jo el vaig descartar com «un altre entorn de treball per a classes», de la mateixa manera que un altre sistema de plantilles o un altre mapeig d'objectes relacional em fan sentir.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, I recently took a look at what <bpt i='0' x='0'>&lt;c0&gt;</bpt>Moose<ept i='0'>&lt;/c0&gt;</ept> had become, and was pleasantly surprised.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Tanmateix, vaig fer un cop d'ull recentment al que s'havia convertit <bpt i='0' x='0'>&lt;c0&gt;</bpt>Moose<ept i='0'>&lt;/c0&gt;</ept> i em vaig endur una sorpresa agradable.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As I started playing with it, I exclaimed frequently that this framework would have saved me quite a bit of time on some past projects, such as the text I wrote for our <bpt i='1' x='1'>&lt;e1&gt;</bpt>Intermediate Perl<ept i='1'>&lt;/e1&gt;</ept> course and book, parts of which have been included as the <bpt i='2' x='2'>&lt;e2&gt;</bpt>perlboot<ept i='2'>&lt;/e2&gt;</ept> manpage in the distribution.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Així que em vaig posar a jugar-hi, sovint vaig exclamar que aquest entorn de treball m'hauria estalviat un bona pila de temps en alguns projectes passats, com ara el text que vaig escriure per al nostre curs i llibre <bpt i='1' x='1'>&lt;e1&gt;</bpt>Intermediate Perl<ept i='1'>&lt;/e1&gt;</ept>, algunes parts del qual s'han inclòs com la pàgina de manual <bpt i='2' x='2'>&lt;e2&gt;</bpt>perlboot<ept i='2'>&lt;/e2&gt;</ept> a la distribució.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Let's recreate the ``animal'' classes from that text, using <bpt i='3' x='3'>&lt;c3&gt;</bpt>Moose<ept i='3'>&lt;/c3&gt;</ept>, to see how this emerging framework simplifies things.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Posem-nos a refer les classes «d'animals» d'aquell text utilitzant <bpt i='3' x='3'>&lt;c3&gt;</bpt>Moose<ept i='3'>&lt;/c3&gt;</ept> per veure com aquest entorn de treball emergent simplifica les coses.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>First, we'll create a horse class in <bpt i='0' x='0'>&lt;c0&gt;</bpt>Horse.pm<ept i='0'>&lt;/c0&gt;</ept> that has a name and a color:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Primer crearem la classe cavall a <bpt i='0' x='0'>&lt;c0&gt;</bpt>Horse.pm<ept i='0'>&lt;/c0&gt;</ept> que té un nom i un color:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bringing in <bpt i='0' x='0'>&lt;c0&gt;</bpt>Moose<ept i='0'>&lt;/c0&gt;</ept> defines <bpt i='1' x='1'>&lt;c1&gt;</bpt>has<ept i='1'>&lt;/c1&gt;</ept>, which takes the name of an attribute along with its properties.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Incorporant <bpt i='0' x='0'>&lt;c0&gt;</bpt>Moose<ept i='0'>&lt;/c0&gt;</ept> es defineix <bpt i='1' x='1'>&lt;c1&gt;</bpt>has<ept i='1'>&lt;/c1&gt;</ept>, al qual se li passa el nom d'un atribut juntament amb les seves propietats.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here, we're saying that the two attributes are ``read/write''.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>En aquest cas, diem que els dos atributs són de «lectura/escriptura».</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We can now use this class:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Ara podem utilitzar aquesta classe:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that I didn't have to define a <bpt i='0' x='0'>&lt;c0&gt;</bpt>new<ept i='0'>&lt;/c0&gt;</ept> method: Moose does that for me.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Fixeu-vos que no m'ha calgut definir un mètode <bpt i='0' x='0'>&lt;c0&gt;</bpt>new<ept i='0'>&lt;/c0&gt;</ept>: Moose ho fa per mi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Now in the original text, <bpt i='0' x='0'>&lt;c0&gt;</bpt>Horse<ept i='0'>&lt;/c0&gt;</ept> inherited from <bpt i='1' x='1'>&lt;c1&gt;</bpt>Animal<ept i='1'>&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>En el text original <bpt i='0' x='0'>&lt;c0&gt;</bpt>Horse<ept i='0'>&lt;/c0&gt;</ept> heretava d'<bpt i='1' x='1'>&lt;c1&gt;</bpt>Animal<ept i='1'>&lt;/c1&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We can do that rather simply.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Podem fer això molt fàcilment.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In <bpt i='2' x='2'>&lt;c2&gt;</bpt>Animal.pm<ept i='2'>&lt;/c2&gt;</ept>, we place:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Posem a <bpt i='2' x='2'>&lt;c2&gt;</bpt>Animal.pm<ept i='2'>&lt;/c2&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And then update our <bpt i='0' x='0'>&lt;c0&gt;</bpt>Horse.pm<ept i='0'>&lt;/c0&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>I aleshores actualitzem el nostre <bpt i='0' x='0'>&lt;c0&gt;</bpt>Horse.pm<ept i='0'>&lt;/c0&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that <bpt i='0' x='0'>&lt;c0&gt;</bpt>extends<ept i='0'>&lt;/c0&gt;</ept> here replaces the traditional <bpt i='1' x='1'>&lt;c1&gt;</bpt>use base<ept i='1'>&lt;/c1&gt;</ept> and completely sets <bpt i='2' x='2'>&lt;c2&gt;</bpt>@ISA<ept i='2'>&lt;/c2&gt;</ept>, rather than adding to it.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Fixeu-vos que aquí <bpt i='0' x='0'>&lt;c0&gt;</bpt>extends<ept i='0'>&lt;/c0&gt;</ept> substitueix el tradicional <bpt i='1' x='1'>&lt;c1&gt;</bpt>use base<ept i='1'>&lt;/c1&gt;</ept> i fixa completament <bpt i='2' x='2'>&lt;c2&gt;</bpt>@ISA<ept i='2'>&lt;/c2&gt;</ept>, enlloc d'afegir-hi un element.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(It's possible that you might want to put this inside a BEGIN block, although I've not seen any examples requiring it yet.)</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>(És possible que vulgueu posar això dins d'un bloc BEGIN, tot i que encara no he vist cap exemple que ho necessiti).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>At this point, <bpt i='0' x='0'>&lt;c0&gt;</bpt>Horse<ept i='0'>&lt;/c0&gt;</ept> and <bpt i='1' x='1'>&lt;c1&gt;</bpt>Animal<ept i='1'>&lt;/c1&gt;</ept> are identical.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>En aquest punt, <bpt i='0' x='0'>&lt;c0&gt;</bpt>Horse<ept i='0'>&lt;/c0&gt;</ept> i <bpt i='1' x='1'>&lt;c1&gt;</bpt>Animal<ept i='1'>&lt;/c1&gt;</ept> són idèntics.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>They can both be instantiated, and have the two given attributes.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Els dos es poden instanciar i se'ls pot assignar atributs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the original example, what distinguished a horse was the sound it made, which we can add here:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>En l'exemple original, el que distingia un cavall era el so que feia, cosa que podem afegir aquí:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>and then reference that in the common <bpt i='0' x='0'>&lt;c0&gt;</bpt>speak<ept i='0'>&lt;/c0&gt;</ept> method in <bpt i='1' x='1'>&lt;c1&gt;</bpt>Animal<ept i='1'>&lt;/c1&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>i aleshores fer-hi referència al mètode comú <bpt i='0' x='0'>&lt;c0&gt;</bpt>speak<ept i='0'>&lt;/c0&gt;</ept> d'<bpt i='1' x='1'>&lt;c1&gt;</bpt>Animal<ept i='1'>&lt;/c1&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note the use of <bpt i='0' x='0'>&lt;c0&gt;</bpt>confess<ept i='0'>&lt;/c0&gt;</ept>, another freebie from Moose.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Fixeu-vos en l'ús de <bpt i='0' x='0'>&lt;c0&gt;</bpt>confess<ept i='0'>&lt;/c0&gt;</ept>, un altre regal de Moose.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the derived class hasn't defined a sound, I want to complain.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Si la classe derivada no ha definit un so, vull queixar-me.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But since <bpt i='1' x='1'>&lt;c1&gt;</bpt>Horse<ept i='1'>&lt;/c1&gt;</ept> defines <bpt i='2' x='2'>&lt;c2&gt;</bpt>sound<ept i='2'>&lt;/c2&gt;</ept>, I'll never see that for a horse.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Però com que <bpt i='1' x='1'>&lt;c1&gt;</bpt>Horse<ept i='1'>&lt;/c1&gt;</ept> defineix <bpt i='2' x='2'>&lt;c2&gt;</bpt>sound<ept i='2'>&lt;/c2&gt;</ept>, no veure mai això per un cavall.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With this code, I can create my classic talking horse:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Amb aquest codi puc crear el meu clàssic cavall parlador:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>So far, I'm still coding things that would be simple without Moose, so let's start diverging a bit to see the full power.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Fins ara només estic programant coses que serien senzilles sense Moose, així que comencem a fer alguns canvis per veure'n tot el poder.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>First, an <bpt i='0' x='0'>&lt;c0&gt;</bpt>Animal<ept i='0'>&lt;/c0&gt;</ept> is really an abstract class, being used only to provide common attributes and methods to a concrete class (in this case, the horse class).</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Primer, un <bpt i='0' x='0'>&lt;c0&gt;</bpt>Animal<ept i='0'>&lt;/c0&gt;</ept> és en realitat una classe abstracta, utilitzada només per proveïr atributs i mètodes comuns per a una classe concreta (en aquest cas, la classe cavall).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In Moose-terminology, this can best be described as a <bpt i='1' x='1'>&lt;e1&gt;</bpt>role<ept i='1'>&lt;/e1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>En la terminologia de Moose això es descriu millor com un <bpt i='1' x='1'>&lt;e1&gt;</bpt>rol<ept i='1'>&lt;/e1&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A role is like a <bpt i='2' x='2'>&lt;e2&gt;</bpt>mix-in<ept i='2'>&lt;/e2&gt;</ept>, providing a collection of attributes and methods that use those attributes.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Un rol és com un <bpt i='2' x='2'>&lt;e2&gt;</bpt>mix-in<ept i='2'>&lt;/e2&gt;</ept>, que proveeix una col·lecció d'atributs i mètodes que utilitzen aquells atributs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A role never has any instances, because it's not a complete class.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Un rol mai té cap instància perquè no és una classe completa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When we make <bpt i='0' x='0'>&lt;c0&gt;</bpt>Animal<ept i='0'>&lt;/c0&gt;</ept> a role, we'll also get some additional support:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Quan fem que <bpt i='0' x='0'>&lt;c0&gt;</bpt>Animal<ept i='0'>&lt;/c0&gt;</ept> sigui un rol també obtenim suport addicional:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that we've replaced the confess-including stub with <bpt i='0' x='0'>&lt;c0&gt;</bpt>requires<ept i='0'>&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Fixeu-vos que hem substituït l'stub que incloïa el confess per un <bpt i='0' x='0'>&lt;c0&gt;</bpt>requires<ept i='0'>&lt;/c0&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This informs Moose that this role must now be used with a class that provides the <bpt i='1' x='1'>&lt;c1&gt;</bpt>sound<ept i='1'>&lt;/c1&gt;</ept> method, which will be checked at compile-time.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Això informa a Moose que les classes que usin aquest rol han de proveir el mètode <bpt i='1' x='1'>&lt;c1&gt;</bpt>sound<ept i='1'>&lt;/c1&gt;</ept>, que serà verificat en temps de compilació.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To pull in a role, we use <bpt i='2' x='2'>&lt;c2&gt;</bpt>with<ept i='2'>&lt;/c2&gt;</ept> rather than <bpt i='3' x='3'>&lt;c3&gt;</bpt>extends<ept i='3'>&lt;/c3&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Per atorgar un rol utilitzem <bpt i='2' x='2'>&lt;c2&gt;</bpt>with<ept i='2'>&lt;/c2&gt;</ept> enlloc d'<bpt i='3' x='3'>&lt;c3&gt;</bpt>extends<ept i='3'>&lt;/c3&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Had we failed to include <bpt i='0' x='0'>&lt;c0&gt;</bpt>sound<ept i='0'>&lt;/c0&gt;</ept>, we'd get notification very early on.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Si ens haguéssim oblidat d'incloure <bpt i='0' x='0'>&lt;c0&gt;</bpt>sound<ept i='0'>&lt;/c0&gt;</ept> hauríem rebut un avís de bon començament.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Cool.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Genial.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>At this point, <bpt i='1' x='1'>&lt;c1&gt;</bpt>Horse<ept i='1'>&lt;/c1&gt;</ept> otherwise still works as before.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>En aquest punt, <bpt i='1' x='1'>&lt;c1&gt;</bpt>Horse<ept i='1'>&lt;/c1&gt;</ept> segueix funcionant com abans.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>What about those <bpt i='0' x='0'>&lt;c0&gt;</bpt>with<ept i='0'>&lt;/c0&gt;</ept> and <bpt i='1' x='1'>&lt;c1&gt;</bpt>requires<ept i='1'>&lt;/c1&gt;</ept> keywords?</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Què passa amb les paraules clau <bpt i='0' x='0'>&lt;c0&gt;</bpt>with<ept i='0'>&lt;/c0&gt;</ept> i <bpt i='1' x='1'>&lt;c1&gt;</bpt>requires<ept i='1'>&lt;/c1&gt;</ept>?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because they're defined by the <bpt i='2' x='2'>&lt;c2&gt;</bpt>Moose<ept i='2'>&lt;/c2&gt;</ept> and <bpt i='3' x='3'>&lt;c3&gt;</bpt>Moose::Role<ept i='3'>&lt;/c3&gt;</ept> imports, they remain as part of the package.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Com que estan definits per les importacions de <bpt i='2' x='2'>&lt;c2&gt;</bpt>Moose<ept i='2'>&lt;/c2&gt;</ept> i <bpt i='3' x='3'>&lt;c3&gt;</bpt>Moose::Role<ept i='3'>&lt;/c3&gt;</ept>, romandran com a part del paquet.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For the purists in us who don't like that kind of pollution, we can throw them away when we're done, using the correponding <bpt i='4' x='4'>&lt;c4&gt;</bpt>no<ept i='4'>&lt;/c4&gt;</ept> keyword (similiar to <bpt i='5' x='5'>&lt;c5&gt;</bpt>use strict<ept i='5'>&lt;/c5&gt;</ept> and <bpt i='6' x='6'>&lt;c6&gt;</bpt>no strict<ept i='6'>&lt;/c6&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Per als puristes com nosaltres als que no ens agrada aquest tipus de pol·lució, podem eliminar-los quan hàgim acabat utilitzant la paraula clau <bpt i='4' x='4'>&lt;c4&gt;</bpt>no<ept i='4'>&lt;/c4&gt;</ept> (de forma similar a <bpt i='5' x='5'>&lt;c5&gt;</bpt>use strict<ept i='5'>&lt;/c5&gt;</ept> i <bpt i='6' x='6'>&lt;c6&gt;</bpt>no strict<ept i='6'>&lt;/c6&gt;</ept>).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, we'd clean up <bpt i='7' x='7'>&lt;c7&gt;</bpt>Horse.pm<ept i='7'>&lt;/c7&gt;</ept> with:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Per exemple, podem netejar <bpt i='7' x='7'>&lt;c7&gt;</bpt>Horse.pm<ept i='7'>&lt;/c7&gt;</ept> amb:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And similarly, <bpt i='0' x='0'>&lt;c0&gt;</bpt>Animal.pm<ept i='0'>&lt;/c0&gt;</ept> requires <bpt i='1' x='1'>&lt;c1&gt;</bpt>no Moose::Role<ept i='1'>&lt;/c1&gt;</ept> at the end.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>I de forma similar, <bpt i='0' x='0'>&lt;c0&gt;</bpt>Animal.pm<ept i='0'>&lt;/c0&gt;</ept> necessita <bpt i='1' x='1'>&lt;c1&gt;</bpt>no Moose::Role<ept i='1'>&lt;/c1&gt;</ept> al final.</seg>
      </tuv>
    </tu>
  </body>
</tmx>
