=pod

=encoding utf-8

=head1 NAME/NOM

Moose::Manual::Concepts - Conceptes d'OO a Moose

=head1 CONCEPTES DE MOOSE (contra Perl "de la vella escola")

En el passat potser no heu pensat massa en la diferència entre paquets i classes, atributs i mètodes, constructors i mètodes, etc. Amb Moose totes aquestes són coses conceptualment separades, tot i que internament s'implementa amb Perl tradicional.

El nostre protocol de meta-objectes (també conegut com MOP) ofereix característiques d'introspecció ben definides per a cadascun d'aquests conceptes, i al seu torn Moose ofereix una diferent sintaxi ensucrada per a cadascun d'ells. Moose també introdueix conceptes addicionals com ara els rols, els modificadors de mètodes i la delegació declarativa.

Conèixer el que volen dir aquests conceptes en l'argot de Moose i com s'acostumaven a utilitzar en l'OO de Perl 5 de la vella escola és una bona manera de començar a aprendre a utilitzar Moose.

=head2 Classe

Quan dieu "use Moose" en un paquet, esteu convertint en vostre paquet en una classe. La manera més simple de definir una classe consistirà únicament d'atributs i/o mètodes. També pot incloure rols, modificadors de mètodes i més.

Una classe I<té> zero o més B<atributs>.

Una classe I<té> zero o més B<mètodes>.

Una classe I<té> zero o més superclasses (o classes pare). Una classe hereta de les seves superclasses.

Una classe I<té> zero o més B<modificadors de mètodes>. Aquests modificadors es poden aplicar als seus propis mètodes o als mètodes heretats dels seus ancestres.

Una classe I<fa> (i I<consumeix>) zero o més B<rols>.

Una classe I<té> un B<constructor> i un B<destructor>. Aquests us els ofereix Moose de franc.

El B<constructor> accepta paràmetres amb nom que corresponguin als atributs de la classe i els utilitza per inicialitzar una B<instància de l'objecte>.

Una classe I<té> una B<meta-classe>, que al seu torn té B<meta-atributs>, B<meta-mètodes>, i B<meta-rols>. Aquesta meta-classe I<descriu> la classe.

Una classe normalment és anàloga a una categoria de noms, com ara "Persones" o "Usuaris".

  package Person;

  use Moose;
  # ara és una classe de Moose!

=head2 Atribut

Un atribut és una propietat que defineix una classe. I<Sempre> té un nom i I<pot tenir> d'altres propietats.

Aquestes propietats inclouen un indicador de lectura/escriptura, un B<tipus>, noms dels mètodes accessors, B<delegacions>, un valor predeterminat, i més.

Els atributs I<no són> mètodes, però en definir-los es creen diversos mètodes accessors. Com a mínim, un atribut normal tindrà sempre un mètode accessor de lectura. Molts atributs també tenen altres mètodes, com ara un mètode d'escriptura, un mètode de neteja, i un mètode de predicat ("s'ha establert?").

Un atribut també pot definir B<delegacions>, que crearan mètodes addicionals basats en el mapatge de delegacions.

Per defecte, Moose emmagatzema els atributs a la instància de l'objecte, què és una referència a una taula de dispersió, I<però això és invisible a l'autor d'una classe basada en Moose>!  És millor pensar en els atributs de Moose com a "propietats" de la B<instància I<opaca> de l'objecte>. Aquestes propietats s'accedeixen mitjançant mètodes accessors ben definits.

Un atribut és quelcom que tenen els membres de la classe. Per exemple, les persones tenen nom i cognom. Els usuaris tenen contrasenyes i la data i hora de darrera connexió.

  has 'first_name' => (
      is  => 'rw',
      isa => 'Str',
  );

=head2 Mètode

Un B<mètode> és força pim pam. Qualsevol subrutina que definiu a la vostra classe és un mètode.

Els B<mètodes> es corresponen amb verbs i són el que els vostres objectes poden fer. Per exemple, un Usuari pot connectar-se.

  sub login { ... }

=head2 Rols

Un rol és quelcom que una classe I<fa>. Diem que les classes I<consumeixen> rols. Per exemple, una classe Màquina podria fer el rol Trencable, tal com podria fer-ho una classe Os. Un rol s'utilitza per definit algun concepte que s'aplica a múltiples classes que no estan relacionades, com ara la "trencabilitat", o
"té un color".

Un rol I<té> zero o més B<atributs>.

Un rol I<té> zero o més B<mètodes>.

Un rol I<té> zero o més B<modificadors de mètode>.

Un rol I<té> zero o més B<mètodes necessaris>.

Un mètode necessari no s'implementa dins el rol. Els mètodes necessaris diuen "per utilitzar aquest Rol heu d'implementar aquest mètode".

Un rol I<té> zero o més B<rols exclosos>.

Un rol exclós és un rol que no es pot combinar amb el rol que indica l'exclusió.

Els rols es I<composen> dins de les classes (o d'altres rols). Quan un rol es composa dins d'una classe els seus atributs i els seus mètodes se "simplifiquen" dins de la classe. Els rols I<no> apareixen a la jerarquia de l'herència. Quan es composa un rol els seus atributs i mètodes apareixen com si s'haguessin definit I<a la classe que el consumeix>.

Els rols són quelcom semblant als I<mixins> o les interfícies en altres llenguatges amb OO.

  package Breakable;

  use Moose::Role;

  requires 'break';

  has 'is_broken' => (
      is  => 'rw',
      isa => 'Bool',
  );

  after 'break' => sub {
      my $self = shift;

      $self->is_broken(1);
  };

=head2 Modificadors de mètode

Un B<modificador de mètode> és un ganxo que es crida quan es crida un mètode amb nom. Per exemple, podeu dir "abans de cridar C<login()>, primer crideu aquest modificador". Els modificadors tenen diferents aspectes com ara "before", "after", "around", i "augment", i podeu aplicar més d'un modificador a un sol mètode.

Els modificadors de mètode s'utilitzen sovint com a alternativa a sobreescriure un mètode d'una classe pare. També s'utilitzen als rols com una manera de modificar els mètodes a la classe que els consumeix.

Internament, un modificador de mètode és una subrutina tradicional de Perl que s'executa abans o després (o enmig, etc.) d'algun mètode amb nom.

  before 'login' => sub {
      my $self = shift;
      my $pw   = shift;

      warn "Called login() with $pw\n";
  };

=head2 Tipus

Moose també duu un sistema de tipus (en miniatura). Això us permet definir tipus per als atributs. Moose té un conjunt de tipus integrats que es basen en el que ofereix Perl, com ara C<Str>, C<Num>, C<Bool>, C<HashRef>, etc.

Addicionalment, cada nom de classe de la vostra aplicació també es pot utilitzar com un nom de tipus.

Finalment, podeu definir els vostres propis tipus, ja siguin subtipus o tipus totalment nous, amb les seves pròpies restriccions. Per exemple, podeu definir un tipus C<PosInt>, un subtipus d'C<Int> que només permet números positius.

=head2 Delegació

Els atributs de Moose ofereixen una sintaxi declarativa per a definir les delegacions. Una delegació és un mètode que crida algun altre mètode d'un atribut per a fer la feina de veritat.

=head2 Constructor

Un constructor crea una B<instància de l'objecte> per a una classe. En Perl de la vella escola això es feia normalment definint un mètode anomenat C<new()>, que al seu torn cridava C<bless> sobre una referència.

Amb Moose, aquest mètode C<new()> es crea per a vosaltres i simplement fa el que ha de fer. No us hauria de caldre mai definir el vostre propi constructor!

De vegades voleu fer alguna cosa quan es crea un objecte. En aquests casos podeu definir el mètode C<BUILD()> a la vostra classe. Moose el cridarà just després de crear un nou objecte.

=head2 Destructor

Aquest és un mètode especial que es crida quan una instància de l'objecte surt fora de context. Podeu refinar el que fa la vostra classe en aquest mètode si us cal, però normalment no us caldrà.

Amb el Perl de la vella escola s'utilitzava el mètode C<DESTROY()>, però amb Moose és el mètode C<DEMOLISH()>.

=head2 Herència d'objectes

Una instància de l'objecte és un nom específic a la "categoria" de la classe. Per exemple, una Persona o un Usuari específics. Una instància es crea amb el B<constructor> de la classe.

Una instància té valors per als seus atributs. Per exemple, una persona específica té un nom i un cognom.

Amb Perl de la vella escola això normalment seria una referència beneïda a una taula de dispersió. Amb Moose no us hauria de caldre mai saber quina és la vostra instància de l'objecte. (D'acord, normalment també és una referència beneïda a una taula de dipsersió a Moose).

=head2 Resum de Moose contra Perl de la vella escola

=over 4

=item * Classe

Un paquet sense cap altra introspecció a banda de potinejar la taula de símbols.

Amb Moose obteniu una declaració i una introspecció ben definides.

=item * Atributs

Mètodes accessors escrits a mà, manipulació de la taula de símbols, o un mòdul d'ajuda com ara C<Class::Accessor>.

Amb Moose es defineixen d'una forma declarativa i diferent dels mètodes.

=item * Mètode

Són pràcticament iguals a Moose que a Perl de la vella escola.

=item * Rols

C<Class::Trait> o C<Class::Role>, o potser C<mixin.pm>.

Amb Moose són part central del conjunt de característiques i se'n pot fer introspecció com en qualsevol altra cosa.

=item * Modificadors de mètode

Només es podria aconseguir fent màgia amb la taula de símbols, i segurament no ho havíeu vist mai fins ara (si més no a Perl 5).

=item * Tipus

Comprovació a mà dels paràmetres als vostres mètodes C<new()> i als accessors.

Amb Moose definiu els tipus de forma declarativa i aleshores els utilitzeu pel nom en els vostres atributs.

=item * Delegació

C<Class::Delegation> o C<Class::Delegator>, però probablement encara més codi escrit a mà.

Amb Moose això també és declaratiu.

=item * Constructor

Un mètode C<new()> que crida C<bless> sobre una referència.

És gratis quan definiu una classe amb Moose.

=item * Destructor

Un mètode C<DESTROY()>.

Amb Moose s'anomena C<DEMOLISH()>.

=item * Instància de l'objecte

Una referència beneïda, normalment una referència a una taula de dispersió.

Amb Moose es tracta d'una cosa opaca que té un seguit d'atributs i mètodes, segons s'hagi definit la classe.

=item * Immutabilitat

Moose té una característica anomenada "immutabilitat". Quan feu la vostra classe immutable, significa que heu acabat d'afegir-hi mètodes, atributs, rols, etc. Això permet que Moose optimitzi la vostra classe amb un seguit de trucs de generació de codi extremadament bruts que acceleren coses com ara la construcció d'objectes i tota la pesca.

=back

=head1 META QUÈ?

Una meta-classe és una classe que descriu d'altres classes. Amb Moose cada classe que definiu té un mètode C<meta()>. Retorna un objecte L<Moose::Meta::Class>, que té una API d'introspecció que us pot parlar sobre la classe que representa.

  my $meta = User->meta();

  for my $attribute ( $meta->get_all_attributes ) {
      print $attribute->name(), "\n";

      if ( $attribute->has_type_constraint ) {
          print "  type: ", $attribute->type_constraint->name, "\n";
      }
  }

  for my $method ( $meta->get_all_methods ) {
      print $method->name, "\n";
  }

Gairebé qualsevol concepte que hem definit fins ara té una meta-classe, així tenim L<Moose::Meta::Class>, L<Moose::Meta::Attribute>, L<Moose::Meta::Method>, L<Moose::Meta::Role>, L<Moose::Meta::TypeConstraint>, L<Moose::Meta::Instance>, etc.

=head1 PERÒ NECESSITO FER-HO A LA MEVA MANERA!

Una de les coses grans de Moose és que si caveu prou fons i trobeu que fa alguna cosa "malament", podeu canviar-ho extenent una meta-classe. Per exemple, podeu tenir objectes basats en referències a una matriu, podeu fer que els vostres constructors siguin estrictes (no acceptaran paràmetres desconeguts!), podeu definir l'esquema per anomenar els accessors dels atributs, podeu fer que una classe tingui el patró Singleton i moltíssimes més coses.

Sorprenentment, moltes d'aquestes extensions només necessiten quantitats petites de codi i, un cop ho heu fet una vegada, no us caldrà programar a mà "la vostra manera de fer-ho" mai més. Només caldrà que carregueu les vostres extensions preferides.

  package MyWay::User;

  use Moose;
  use MooseX::StrictConstructor
  use MooseX::MyWay;

  has ...;

=head1 I ARA QUÈ?

Ja us hem venut Moose. Ara és hora d'aprendre realment a utilitzar-lo.

Si voleu veure com faríeu el que feu amb Moose però amb OO de Perl 5 de la vella escola, feu un cop d'ull a L<Moose::Manual::Unsweetened>. Això pot ser útil per tal que el vostre cervell s'acostumi a "la manera de Moose" d'enfocar algunes coses.

O podeu saltar-vos-ho i saltar directament a L<Moose::Manual::Classes> i la resta del L<Moose::Manual>.

Després, us recomanem que comenceu amb el L<Moose::Cookbook>. Si aconseguiu passar més enllà de les receptes de la secció de conceptes bàsics, hauríeu de tenir una bona idea de com funciona Moose i totes les seves característiques d'OO.

Després, feu un cop d'ull a les receptes de rols. Si realment teniu curiositat, seguiu llegint les receptes de Meta i Extending, però aquelles són principalment per volen ser mags de Moose i canviar la manera com funciona Moose.

=head1 AUTOR

Dave Rolsky E<lt>autarch@urth.orgE<gt>

=head1 COPYRIGHT I LLICÈNCIA

Copyright 2008-2009 by Infinity Interactive, Inc.

L<http://www.iinteractive.com>

Aquesta llibreria és programari lliure; podeu redistribuir-la i/o modificar-la amb les mateixes condicions del propi Perl.

=cut
