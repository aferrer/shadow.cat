=pod

=encoding utf-8

=head1 NAME/NOM

Moose::Manual::Unsweetened - Modismes de Moose idioms en Perl 5 tradicional sense ensucrar

=head1 DESCRIPCIÓ

Si esteu intentant descobrir què coi fa Moose, i com us pot estalviar temps, trobareu útil veure què està fent Moose )<realment> per vosaltres. Aquest document us mostra la traducció de Moose a Perl 5 tradicional.

=head1 CLASSES I ATRIBUTS

Primer, definim dues classes petites a l'estil Moose.

  package Person;

  use DateTime;
  use DateTime::Format::Natural;
  use Moose;
  use Moose::Util::TypeConstraints;

  has name => (
      is       => 'rw',
      isa      => 'Str',
      required => 1,
  );

  # Moose no sap res de classes que no estan basades en Moose.
  class_type 'DateTime';

  my $en_parser = DateTime::Format::Natural->new(
      lang      => 'en',
      time_zone => 'UTC',
  );

  coerce 'DateTime'
      => from 'Str'
      => via { $en_parser->parse_datetime($_) };

  has birth_date => (
      is      => 'rw',
      isa     => 'DateTime',
      coerce  => 1,
      handles => { birth_year => 'year' },
  );

  subtype 'ShirtSize'
      => as 'Str'
      => where { /^(?:s|m|l|xl|xxl)$/i }
      => message { "$_ is not a valid shirt size (s, m, l, xl, xxl)" };

  has shirt_size => (
      is      => 'rw',
      isa     => 'ShirtSize',
      default => 'l',
  );

Aquesta és una classe prou simple amb tres atributs. També podem definir in tipus per validar talles de samarretes perque no volem acabar tenint quelcom com 'blau' com a talla de samarreta!

  package User;

  use Email::Valid;
  use Moose;
  use Moose::Util::TypeConstraints;

  extends 'Person';

  subtype 'Email'
      => as 'Str'
      => where { Email::Valid->address($_) }
      => message { "$_ is not a valid email address" };

  has email_address => (
      is       => 'rw',
      isa      => 'Email',
      required => 1,
  );

Aquesta classe converteix Person en una subclasse per afegir un únic atribut, l'adreça de correu electrònic.

Ara mostrarem com serien aquestes classes en Perl 5 tradicional. Per aquest cas, assumirem que no s'utilitza cap classe base ni mòdul d'ajuda com C<Class::Accessor>.

  package Person;

  use strict;
  use warnings;

  use Carp qw( confess );
  use DateTime;
  use DateTime::Format::Natural;


  sub new {
      my $class = shift;
      my %p = ref $_[0] ? %{ $_[0] } : @_;

      exists $p{name}
          or confess 'name is a required attribute';
      $class->_validate_name( $p{name} );

      exists $p{birth_date}
          or confess 'birth_date is a required attribute';

      $p{birth_date} = $class->_coerce_birth_date( $p{birth_date} );
      $class->_validate_birth_date( $p{birth_date} );

      $p{shirt_size} = 'l'
          unless exists $p{shirt_size}:

      $class->_validate_shirt_size( $p{shirt_size} );

      return bless \%p, $class;
  }

  sub _validate_name {
      shift;
      my $name = shift;

      local $Carp::CarpLevel = $Carp::CarpLevel + 1;

      defined $name
          or confess 'name must be a string';
  }

  {
      my $en_parser = DateTime::Format::Natural->new(
          lang      => 'en',
          time_zone => 'UTC',
      );

      sub _coerce_birth_date {
          shift;
          my $date = shift;

          return $date unless defined $date && ! ref $date;

          my $dt = $en_parser->parse_datetime($date);

          return $dt ? $dt : undef;
      }
  }

  sub _validate_birth_date {
      shift;
      my $birth_date = shift;

      local $Carp::CarpLevel = $Carp::CarpLevel + 1;

      $birth_date->isa('DateTime')
          or confess 'birth_date must be a DateTime object';
  }

  sub _validate_shirt_size {
      shift;
      my $shirt_size = shift;

      local $Carp::CarpLevel = $Carp::CarpLevel + 1;

      defined $shirt_size
          or confess 'shirt_size cannot be undef';

      $shirt_size =~ /^(?:s|m|l|xl|xxl)$/
          or confess "$shirt_size is not a valid shirt size (s, m, l, xl, xxl)";
  }

  sub name {
      my $self = shift;

      if (@_) {
          $self->_validate_name( $_[0] );
          $self->{name} = $_[0];
      }

      return $self->{name};
  }

  sub birth_date {
      my $self = shift;

      if (@_) {
          my $date = $self->_coerce_birth_date( $_[0] );
          $self->_validate_birth_date( $date );

          $self->{birth_date} = $date;
      }

      return $self->{birth_date};
  }

  sub birth_year {
      my $self = shift;

      return $self->birth_date->year;
  }

  sub shirt_size {
      my $self = shift;

      if (@_) {
          $self->_validate_shirt_size( $_[0] );
          $self->{shirt_size} = $_[0];
      }

      return $self->{shirt_size};
  }

Caram, això ha sigut un bon mos! Una cosa que cal percebre és la quantitat d'espai que el codi de validació de dades consumeix. Conseqüentment, és força comú que els programadors de Perl 5 ni tan sols es molestin a fer-ho. Malauradament, no validar els arguments porta sorpreses tard o d'hora ("per què birth_date és una adreça de correu electrònic?").

A més, heu vist el l'error de programació (no intencionat)?

Es troba al mètode C<_validate_birth_date()>. Hauríem de comprovar que el valor a C<$birth_date> està realment definit i un objecte abans anem i cridem C<isa()> sobre ell! Deixar fora aquestes comprovacions significa que el nostre codi de validació de dades podria fins i tot provocar que el nostre programa morís. Ups.

Noteu que si afegim una superclasse a Person haurem de canviar el constructor per justificar-ho.

(Tema apart, aconseguir tots els petits detalls de què pot fer Moose per vosaltres correctament en aquest exemple no ha estat gens fàcil, cosa que emfatitza el tema de l'exemple. Moose t'estalvia un munt de feina!)

Ara mirem User:

  package User;

  use strict;
  use warnings;

  use Carp qw( confess );
  use Email::Valid;
  use Scalar::Util qw( blessed );

  use base 'Person';


  sub new {
      my $class = shift;
      my %p = ref $_[0] ? %{ $_[0] } : @_;

      exists $p{email_address}
          or confess 'email_address is a required attribute';
      $class->_validate_email_address( $p{email_address} );

      my $self = $class->SUPER::new(%p);

      $self->{email_address} = $p{email_address};

      return $self;
  }

  sub _validate_email_address {
      shift;
      my $email_address = shift;

      local $Carp::CarpLevel = $Carp::CarpLevel + 1;

      defined $email_address
          or confess 'email_address must be a string';

      Email::Valid->address($email_address)
          or confess "$email_address is not a valid email address";
  }

  sub email_address {
      my $self = shift;

      if (@_) {
          $self->_validate_email_address( $_[0] );
          $self->{email_address} = $_[0];
      }

      return $self->{email_address};
  }

Aquest és més curt, però només té un atribut.

Entre les dues classes tenim un munt de codi que no fa gaire cosa. Probablement podriem simplificar això definint algun tipus de taula de dispersió "atribut i validació", com ara així:

  package Person;

  my %Attr = (
      name => {
          required => 1,
          validate => sub { defined $_ },
      },
      birth_date => {
          required => 1,
          validate => sub { blessed $_ && $_->isa('DateTime') },
      },
      shirt_size => {
          required => 1,
          validate => sub { defined $_ && $_ =~ /^(?:s|m|l|xl|xxl)$/i },
      }
  );

Així podriem definir una classe base que podria acceptar una definició així i fer bé les coses. Seguiu fent això i estarem en camí d'escriure una versió a mitges de Moose!.

És clar, hi ha mòduls de CPAN que fan algunes de les coses que Moose fa, com C<Class::Accessor>, C<Class::Meta>, i altres. Però cap d'ells ajunta totes les funcionalitats de Moose amb una capa de sucre declaratiu, ni estan dissenyats per extensibilitat com ho està Moose. Amb Moose, és fàcil escriure un mòdul MooseX per re-emplaçar o extendre una peça de funcionalitat integrada.

Moose és un paquet d'OO en i d'ell mateix, i és part d'un ric ecosistema d'extensions. També té una comunitat entusiasta d'usuaris i està sent mantingut i desenvolupat activament.

=head1 AUTOR

Dave Rolsky E<lt>autarch@urth.orgE<gt>

=head1 COPYRIGHT I LLICÈNCIA

Copyright 2009 by Infinity Interactive, Inc.

L<http://www.iinteractive.com>

Aquesta llibreria és programari lliure; podeu redistribuir-la i/o modificar-la amb les mateixes condicions del propi Perl.

=cut
