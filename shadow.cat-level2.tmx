<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE tmx SYSTEM "tmx14.dtd">
<tmx version="1.4">
  <header
    creationtool="OmegaT"
    creationtoolversion="1.8.1_2"
    segtype="sentence"
    o-tmf="OmegaT TMX"
    adminlang="EN-US"
    srclang="EN-US"
    datatype="plaintext"
  >
  </header>
  <body>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The Moose is Flying (part 1) (Jun 07)</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>El Moose està volant (1a part) (juny 07)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The Perl Review: the magazine of Perl</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>The Perl Review: la revista de Perl</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Worldwide training and consulting by Perl experts</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Formació i consultoria arreu del món per experts en Perl</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Jump to content...</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Salteu al contingut...</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Columns</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Columnes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Pictures</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Fotografies</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Columns by Randal</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Columnes d'en Randal</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>LM Columns</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Columnes a LM</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>PJ Columns</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Columnes a PJ</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>UR Columns</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Columnes a UR</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>WT Columns</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Columnes a WT</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>LM Columns by Randal</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Columnes d'en Randal a LM</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Search Stonehenge</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Cerqueu a Stonehenge</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Most-recently modified on 08:05:54 11-May-2007.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Darrera modificació a les 08:05:54 11-May-2007.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Copyright Notice</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Avís de copyright</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This text is copyright by InfoStrada Communications, Inc., and is used with their permission.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>El copyright d'aquest text és propietat d'InfoStrada Communications, Inc. i s'utilitza amb el seu permís.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Further distribution or use is not permitted.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Qualsevol altre tipus de difusió o ús no està permès.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This text has appeared in an edited form in <bpt i='0' x='0'>&lt;c0&gt;</bpt>Linux Magazine<ept i='0'>&lt;/c0&gt;</ept> magazine.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Aquest text va aparèixer en una edició de la revista <bpt i='0' x='0'>&lt;c0&gt;</bpt>Linux Magazine<ept i='0'>&lt;/c0&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, the version you are reading here is as the author originally submitted the article for publication, not after their editors applied their creativity.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Tanmateix, la versió que esteu llegint aquí és l'article original tal com l'autor el va enviar per a ser publicat, abans que els editors apliquessin la seva creativitat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Please read all the information in the <bpt i='0' x='0'>&lt;a0&gt;</bpt>table of contents<ept i='0'>&lt;/a0&gt;</ept> before using this article.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Si us plau, llegiu tota la informació de <bpt i='0' x='0'>&lt;a0&gt;</bpt>l'índex<ept i='0'>&lt;/a0&gt;</ept> abans d'utilitzar aquest article.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Linux Magazine Column 94 (Jun 2007)</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Columna 94 del Linux Magazine (juny de 2007)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>[suggested title: ``The Moose is Flying (part 1)'']</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>[títol suggerit: «El Moose està volant (1a part)»]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Perl's object system is very ``flexible'', meaning, you get to build it from the ground up.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>El sistema d'objectes de Perl és molt «flexible», és a dir, es construeix de baix cap a dalt.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can build traditional hash-based objects, or more exotic array-based or inside-out objects.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Podeu construir objectes tradicionals basats en taules de dispersió, o objectes més exòtics basats en matrius o objectes capgirats.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And then you have to create the accessors, define access policies, and perform a lot of repetitive code.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Aleshores heu de crear els mètodes accessors, definir les polítiques d'accés i generar un munt de codi repetit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Luckily, Perl is introspective enough that you can get Perl to do most of the hard boring work.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Afortunadament, Perl és prou introspectiu com perquè li encomaneu la majoria del treball dur i avorrit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This has resulted in a number of ``class frameworks'' finding their way onto the CPAN.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Això ha provocat que un bon nombre «d'entorns de treball per a classes» hagin estat publicats al CPAN.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i='0' x='0'>&lt;c0&gt;</bpt>Moose<ept i='0'>&lt;/c0&gt;</ept> framework appeared about a year ago, and I initially dismissed it as ``yet another class framework'', much in the same way as I feel about yet another templating system or object-relational mapper.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>L'enton de treball <bpt i='0' x='0'>&lt;c0&gt;</bpt>Moose<ept i='0'>&lt;/c0&gt;</ept> va sorgir fa un any i inicialment jo el vaig descartar com «un altre entorn de treball per a classes», de la mateixa manera que un altre sistema de plantilles o un altre mapeig d'objectes relacional em fan sentir.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, I recently took a look at what <bpt i='0' x='0'>&lt;c0&gt;</bpt>Moose<ept i='0'>&lt;/c0&gt;</ept> had become, and was pleasantly surprised.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Tanmateix, vaig fer un cop d'ull recentment al que s'havia convertit <bpt i='0' x='0'>&lt;c0&gt;</bpt>Moose<ept i='0'>&lt;/c0&gt;</ept> i em vaig endur una sorpresa agradable.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As I started playing with it, I exclaimed frequently that this framework would have saved me quite a bit of time on some past projects, such as the text I wrote for our <bpt i='1' x='1'>&lt;e1&gt;</bpt>Intermediate Perl<ept i='1'>&lt;/e1&gt;</ept> course and book, parts of which have been included as the <bpt i='2' x='2'>&lt;e2&gt;</bpt>perlboot<ept i='2'>&lt;/e2&gt;</ept> manpage in the distribution.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Així que em vaig posar a jugar-hi, sovint vaig exclamar que aquest entorn de treball m'hauria estalviat un bona pila de temps en alguns projectes passats, com ara el text que vaig escriure per al nostre curs i llibre <bpt i='1' x='1'>&lt;e1&gt;</bpt>Intermediate Perl<ept i='1'>&lt;/e1&gt;</ept>, algunes parts del qual s'han inclòs com la pàgina de manual <bpt i='2' x='2'>&lt;e2&gt;</bpt>perlboot<ept i='2'>&lt;/e2&gt;</ept> a la distribució.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Let's recreate the ``animal'' classes from that text, using <bpt i='3' x='3'>&lt;c3&gt;</bpt>Moose<ept i='3'>&lt;/c3&gt;</ept>, to see how this emerging framework simplifies things.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Posem-nos a refer les classes «d'animals» d'aquell text utilitzant <bpt i='3' x='3'>&lt;c3&gt;</bpt>Moose<ept i='3'>&lt;/c3&gt;</ept> per veure com aquest entorn de treball emergent simplifica les coses.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>First, we'll create a horse class in <bpt i='0' x='0'>&lt;c0&gt;</bpt>Horse.pm<ept i='0'>&lt;/c0&gt;</ept> that has a name and a color:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Primer crearem la classe cavall a <bpt i='0' x='0'>&lt;c0&gt;</bpt>Horse.pm<ept i='0'>&lt;/c0&gt;</ept> que té un nom i un color:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Bringing in <bpt i='0' x='0'>&lt;c0&gt;</bpt>Moose<ept i='0'>&lt;/c0&gt;</ept> defines <bpt i='1' x='1'>&lt;c1&gt;</bpt>has<ept i='1'>&lt;/c1&gt;</ept>, which takes the name of an attribute along with its properties.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Incorporant <bpt i='0' x='0'>&lt;c0&gt;</bpt>Moose<ept i='0'>&lt;/c0&gt;</ept> es defineix <bpt i='1' x='1'>&lt;c1&gt;</bpt>has<ept i='1'>&lt;/c1&gt;</ept>, al qual se li passa el nom d'un atribut juntament amb les seves propietats.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Here, we're saying that the two attributes are ``read/write''.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>En aquest cas, diem que els dos atributs són de «lectura/escriptura».</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We can now use this class:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Ara podem utilitzar aquesta classe:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that I didn't have to define a <bpt i='0' x='0'>&lt;c0&gt;</bpt>new<ept i='0'>&lt;/c0&gt;</ept> method: Moose does that for me.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Fixeu-vos que no m'ha calgut definir un mètode <bpt i='0' x='0'>&lt;c0&gt;</bpt>new<ept i='0'>&lt;/c0&gt;</ept>: Moose ho fa per mi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Now in the original text, <bpt i='0' x='0'>&lt;c0&gt;</bpt>Horse<ept i='0'>&lt;/c0&gt;</ept> inherited from <bpt i='1' x='1'>&lt;c1&gt;</bpt>Animal<ept i='1'>&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>En el text original <bpt i='0' x='0'>&lt;c0&gt;</bpt>Horse<ept i='0'>&lt;/c0&gt;</ept> heretava d'<bpt i='1' x='1'>&lt;c1&gt;</bpt>Animal<ept i='1'>&lt;/c1&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We can do that rather simply.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Podem fer això molt fàcilment.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In <bpt i='2' x='2'>&lt;c2&gt;</bpt>Animal.pm<ept i='2'>&lt;/c2&gt;</ept>, we place:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Posem a <bpt i='2' x='2'>&lt;c2&gt;</bpt>Animal.pm<ept i='2'>&lt;/c2&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And then update our <bpt i='0' x='0'>&lt;c0&gt;</bpt>Horse.pm<ept i='0'>&lt;/c0&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>I aleshores actualitzem el nostre <bpt i='0' x='0'>&lt;c0&gt;</bpt>Horse.pm<ept i='0'>&lt;/c0&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that <bpt i='0' x='0'>&lt;c0&gt;</bpt>extends<ept i='0'>&lt;/c0&gt;</ept> here replaces the traditional <bpt i='1' x='1'>&lt;c1&gt;</bpt>use base<ept i='1'>&lt;/c1&gt;</ept> and completely sets <bpt i='2' x='2'>&lt;c2&gt;</bpt>@ISA<ept i='2'>&lt;/c2&gt;</ept>, rather than adding to it.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Fixeu-vos que aquí <bpt i='0' x='0'>&lt;c0&gt;</bpt>extends<ept i='0'>&lt;/c0&gt;</ept> substitueix el tradicional <bpt i='1' x='1'>&lt;c1&gt;</bpt>use base<ept i='1'>&lt;/c1&gt;</ept> i fixa completament <bpt i='2' x='2'>&lt;c2&gt;</bpt>@ISA<ept i='2'>&lt;/c2&gt;</ept>, enlloc d'afegir-hi un element.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(It's possible that you might want to put this inside a BEGIN block, although I've not seen any examples requiring it yet.)</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>(És possible que vulgueu posar això dins d'un bloc BEGIN, tot i que encara no he vist cap exemple que ho necessiti).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>At this point, <bpt i='0' x='0'>&lt;c0&gt;</bpt>Horse<ept i='0'>&lt;/c0&gt;</ept> and <bpt i='1' x='1'>&lt;c1&gt;</bpt>Animal<ept i='1'>&lt;/c1&gt;</ept> are identical.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>En aquest punt, <bpt i='0' x='0'>&lt;c0&gt;</bpt>Horse<ept i='0'>&lt;/c0&gt;</ept> i <bpt i='1' x='1'>&lt;c1&gt;</bpt>Animal<ept i='1'>&lt;/c1&gt;</ept> són idèntics.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>They can both be instantiated, and have the two given attributes.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Els dos es poden instanciar i se'ls pot assignar atributs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the original example, what distinguished a horse was the sound it made, which we can add here:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>En l'exemple original, el que distingia un cavall era el so que feia, cosa que podem afegir aquí:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>and then reference that in the common <bpt i='0' x='0'>&lt;c0&gt;</bpt>speak<ept i='0'>&lt;/c0&gt;</ept> method in <bpt i='1' x='1'>&lt;c1&gt;</bpt>Animal<ept i='1'>&lt;/c1&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>i aleshores fer-hi referència al mètode comú <bpt i='0' x='0'>&lt;c0&gt;</bpt>speak<ept i='0'>&lt;/c0&gt;</ept> d'<bpt i='1' x='1'>&lt;c1&gt;</bpt>Animal<ept i='1'>&lt;/c1&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note the use of <bpt i='0' x='0'>&lt;c0&gt;</bpt>confess<ept i='0'>&lt;/c0&gt;</ept>, another freebie from Moose.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Fixeu-vos en l'ús de <bpt i='0' x='0'>&lt;c0&gt;</bpt>confess<ept i='0'>&lt;/c0&gt;</ept>, un altre regal de Moose.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the derived class hasn't defined a sound, I want to complain.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Si la classe derivada no ha definit un so, vull queixar-me.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But since <bpt i='1' x='1'>&lt;c1&gt;</bpt>Horse<ept i='1'>&lt;/c1&gt;</ept> defines <bpt i='2' x='2'>&lt;c2&gt;</bpt>sound<ept i='2'>&lt;/c2&gt;</ept>, I'll never see that for a horse.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Però com que <bpt i='1' x='1'>&lt;c1&gt;</bpt>Horse<ept i='1'>&lt;/c1&gt;</ept> defineix <bpt i='2' x='2'>&lt;c2&gt;</bpt>sound<ept i='2'>&lt;/c2&gt;</ept>, no veure mai això per un cavall.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With this code, I can create my classic talking horse:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Amb aquest codi puc crear el meu clàssic cavall parlador:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>So far, I'm still coding things that would be simple without Moose, so let's start diverging a bit to see the full power.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Fins ara només estic programant coses que serien senzilles sense Moose, així que comencem a fer alguns canvis per veure'n tot el poder.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>First, an <bpt i='0' x='0'>&lt;c0&gt;</bpt>Animal<ept i='0'>&lt;/c0&gt;</ept> is really an abstract class, being used only to provide common attributes and methods to a concrete class (in this case, the horse class).</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Primer, un <bpt i='0' x='0'>&lt;c0&gt;</bpt>Animal<ept i='0'>&lt;/c0&gt;</ept> és en realitat una classe abstracta, utilitzada només per proveïr atributs i mètodes comuns per a una classe concreta (en aquest cas, la classe cavall).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In Moose-terminology, this can best be described as a <bpt i='1' x='1'>&lt;e1&gt;</bpt>role<ept i='1'>&lt;/e1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>En la terminologia de Moose això es descriu millor com un <bpt i='1' x='1'>&lt;e1&gt;</bpt>rol<ept i='1'>&lt;/e1&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A role is like a <bpt i='2' x='2'>&lt;e2&gt;</bpt>mix-in<ept i='2'>&lt;/e2&gt;</ept>, providing a collection of attributes and methods that use those attributes.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Un rol és com un <bpt i='2' x='2'>&lt;e2&gt;</bpt>mix-in<ept i='2'>&lt;/e2&gt;</ept>, que proveeix una col·lecció d'atributs i mètodes que utilitzen aquells atributs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A role never has any instances, because it's not a complete class.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Un rol mai té cap instància perquè no és una classe completa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When we make <bpt i='0' x='0'>&lt;c0&gt;</bpt>Animal<ept i='0'>&lt;/c0&gt;</ept> a role, we'll also get some additional support:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Quan fem que <bpt i='0' x='0'>&lt;c0&gt;</bpt>Animal<ept i='0'>&lt;/c0&gt;</ept> sigui un rol també obtenim suport addicional:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that we've replaced the confess-including stub with <bpt i='0' x='0'>&lt;c0&gt;</bpt>requires<ept i='0'>&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Fixeu-vos que hem substituït l'«stub» que incloïa el confess per un <bpt i='0' x='0'>&lt;c0&gt;</bpt>requires<ept i='0'>&lt;/c0&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This informs Moose that this role must now be used with a class that provides the <bpt i='1' x='1'>&lt;c1&gt;</bpt>sound<ept i='1'>&lt;/c1&gt;</ept> method, which will be checked at compile-time.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Això informa a Moose que les classes que usin aquest rol han de proveir el mètode <bpt i='1' x='1'>&lt;c1&gt;</bpt>sound<ept i='1'>&lt;/c1&gt;</ept>, que serà verificat en temps de compilació.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To pull in a role, we use <bpt i='2' x='2'>&lt;c2&gt;</bpt>with<ept i='2'>&lt;/c2&gt;</ept> rather than <bpt i='3' x='3'>&lt;c3&gt;</bpt>extends<ept i='3'>&lt;/c3&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Per atorgar un rol utilitzem <bpt i='2' x='2'>&lt;c2&gt;</bpt>with<ept i='2'>&lt;/c2&gt;</ept> enlloc d'<bpt i='3' x='3'>&lt;c3&gt;</bpt>extends<ept i='3'>&lt;/c3&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Had we failed to include <bpt i='0' x='0'>&lt;c0&gt;</bpt>sound<ept i='0'>&lt;/c0&gt;</ept>, we'd get notification very early on.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Si ens haguéssim oblidat d'incloure <bpt i='0' x='0'>&lt;c0&gt;</bpt>sound<ept i='0'>&lt;/c0&gt;</ept> hauríem rebut un avís de bon començament.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Cool.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Genial.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>At this point, <bpt i='1' x='1'>&lt;c1&gt;</bpt>Horse<ept i='1'>&lt;/c1&gt;</ept> otherwise still works as before.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>En aquest punt, <bpt i='1' x='1'>&lt;c1&gt;</bpt>Horse<ept i='1'>&lt;/c1&gt;</ept> segueix funcionant com abans.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>What about those <bpt i='0' x='0'>&lt;c0&gt;</bpt>with<ept i='0'>&lt;/c0&gt;</ept> and <bpt i='1' x='1'>&lt;c1&gt;</bpt>requires<ept i='1'>&lt;/c1&gt;</ept> keywords?</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Què passa amb les paraules clau <bpt i='0' x='0'>&lt;c0&gt;</bpt>with<ept i='0'>&lt;/c0&gt;</ept> i <bpt i='1' x='1'>&lt;c1&gt;</bpt>requires<ept i='1'>&lt;/c1&gt;</ept>?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Because they're defined by the <bpt i='2' x='2'>&lt;c2&gt;</bpt>Moose<ept i='2'>&lt;/c2&gt;</ept> and <bpt i='3' x='3'>&lt;c3&gt;</bpt>Moose::Role<ept i='3'>&lt;/c3&gt;</ept> imports, they remain as part of the package.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Com que estan definits per les importacions de <bpt i='2' x='2'>&lt;c2&gt;</bpt>Moose<ept i='2'>&lt;/c2&gt;</ept> i <bpt i='3' x='3'>&lt;c3&gt;</bpt>Moose::Role<ept i='3'>&lt;/c3&gt;</ept>, romandran com a part del paquet.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For the purists in us who don't like that kind of pollution, we can throw them away when we're done, using the correponding <bpt i='4' x='4'>&lt;c4&gt;</bpt>no<ept i='4'>&lt;/c4&gt;</ept> keyword (similiar to <bpt i='5' x='5'>&lt;c5&gt;</bpt>use strict<ept i='5'>&lt;/c5&gt;</ept> and <bpt i='6' x='6'>&lt;c6&gt;</bpt>no strict<ept i='6'>&lt;/c6&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Per als puristes com nosaltres als que no ens agrada aquest tipus de pol·lució, podem eliminar-los quan hàgim acabat utilitzant la paraula clau <bpt i='4' x='4'>&lt;c4&gt;</bpt>no<ept i='4'>&lt;/c4&gt;</ept> (de forma similar a <bpt i='5' x='5'>&lt;c5&gt;</bpt>use strict<ept i='5'>&lt;/c5&gt;</ept> i <bpt i='6' x='6'>&lt;c6&gt;</bpt>no strict<ept i='6'>&lt;/c6&gt;</ept>).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, we'd clean up <bpt i='7' x='7'>&lt;c7&gt;</bpt>Horse.pm<ept i='7'>&lt;/c7&gt;</ept> with:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Per exemple, podem netejar <bpt i='7' x='7'>&lt;c7&gt;</bpt>Horse.pm<ept i='7'>&lt;/c7&gt;</ept> amb:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And similarly, <bpt i='0' x='0'>&lt;c0&gt;</bpt>Animal.pm<ept i='0'>&lt;/c0&gt;</ept> requires <bpt i='1' x='1'>&lt;c1&gt;</bpt>no Moose::Role<ept i='1'>&lt;/c1&gt;</ept> at the end.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>I de forma similar, <bpt i='0' x='0'>&lt;c0&gt;</bpt>Animal.pm<ept i='0'>&lt;/c0&gt;</ept> necessita <bpt i='1' x='1'>&lt;c1&gt;</bpt>no Moose::Role<ept i='1'>&lt;/c1&gt;</ept> al final.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Moose supports the notion of a default value.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Moose ofereix suport per a la noció de valor predeterminat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Let's add in the default color, and make that a class responsibility as well:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Afegim el color predeterminat i fem que això també sigui responsabilitat de la classe:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the color isn't provided, the default color of the class will be consulted, and <bpt i='0' x='0'>&lt;c0&gt;</bpt>requires<ept i='0'>&lt;/c0&gt;</ept> ensures that the concrete class provides this default color.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Si no s'indica el color, es consultarà el color predeterminat de la classe i <bpt i='0' x='0'>&lt;c0&gt;</bpt>requires<ept i='0'>&lt;/c0&gt;</ept> garanteix que la classe concreta proveeix aquest color predeterminat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Our derived animal classes now look like:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Les nostres classes derivades ara tenen aquest aspecte:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Now we can count sheep as one of our implemented classes:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Ara «ovella» és una més de les nostres classes implementades:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Well, this is pretty straightforward.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Bé, això és força pim pam.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Let's solve a few other problems from the original material.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Anem a resoldre alguns dels altres problemes del material original.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i='0' x='0'>&lt;c0&gt;</bpt>Mouse<ept i='0'>&lt;/c0&gt;</ept> class was special, because it extended the <bpt i='1' x='1'>&lt;c1&gt;</bpt>speak<ept i='1'>&lt;/c1&gt;</ept> method with an additional line of output.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>La classe <bpt i='0' x='0'>&lt;c0&gt;</bpt>Mouse<ept i='0'>&lt;/c0&gt;</ept> era especial perquè extenia el mètode <bpt i='1' x='1'>&lt;c1&gt;</bpt>speak<ept i='1'>&lt;/c1&gt;</ept> amb una línia addicional de sortida.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>While we could use traditional <bpt i='2' x='2'>&lt;c2&gt;</bpt>SUPER::<ept i='2'>&lt;/c2&gt;</ept>-based method calls to call parent-class behaviors, this doesn't work with roles.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Tot i que podríem utilitzar els mètodes tradicionals basats en <bpt i='2' x='2'>&lt;c2&gt;</bpt>SUPER::<ept i='2'>&lt;/c2&gt;</ept> per cridar els comportaments de la classe pare, això no funciona amb els rols.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(Roles don't end up in <bpt i='3' x='3'>&lt;c3&gt;</bpt>@ISA<ept i='3'>&lt;/c3&gt;</ept>, because they're ``glued in'' rather than ``tacked above''.)</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>(Els rols no acaben dins de <bpt i='3' x='3'>&lt;c3&gt;</bpt>@ISA<ept i='3'>&lt;/c3&gt;</ept> perquè estan «empegats per dins» enlloc d'«enganxats al damunt»).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Luckily, Moose provides the convenient <bpt i='0' x='0'>&lt;c0&gt;</bpt>after<ept i='0'>&lt;/c0&gt;</ept> call to append additional steps to an existing subroutine.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Afortunadament, Moose ofereix convenientment la crida <bpt i='0' x='0'>&lt;c0&gt;</bpt>after<ept i='0'>&lt;/c0&gt;</ept> per afegir passes addicionals al final d'una subrutina existent.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Moose does this by replacing the original subroutine with a new subroutine that calls the original routine and then calls the additional code.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Moose fa això substituint la subrutina original per una nova subrutina que crida l'orginal i tot seguit crida al codi addicional.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The context (list, scalar, or void) is properly preserved, as is the original return value.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>El context (llista, escalar, o buit) es conserva de forma adequada, així com també el valor de retorn original.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Our amended <bpt i='1' x='1'>&lt;c1&gt;</bpt>speak<ept i='1'>&lt;/c1&gt;</ept> looks something like:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>El nostre <bpt i='1' x='1'>&lt;c1&gt;</bpt>speak<ept i='1'>&lt;/c1&gt;</ept> retocat té aquesta pinta:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This gives us a properly functioning mouse:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Això ens dóna un ratolí que funciona correctament:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>which results in:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>que dóna com a resultat:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We can also use <bpt i='0' x='0'>&lt;c0&gt;</bpt>before<ept i='0'>&lt;/c0&gt;</ept> and <bpt i='1' x='1'>&lt;c1&gt;</bpt>around<ept i='1'>&lt;/c1&gt;</ept> to precede the original behavior or control the calling of the original behavior, as necessary.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>També podem utilitzar <bpt i='0' x='0'>&lt;c0&gt;</bpt>before<ept i='0'>&lt;/c0&gt;</ept> per a precedir el comportament original o <bpt i='1' x='1'>&lt;c1&gt;</bpt>around<ept i='1'>&lt;/c1&gt;</ept> per a controlar com es crida el comportament original, segons calgui.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, to allow <bpt i='2' x='2'>&lt;c2&gt;</bpt>name<ept i='2'>&lt;/c2&gt;</ept> to be used as both an accessor and still return <bpt i='3' x='3'>&lt;c3&gt;</bpt>an unnamed Horse<ept i='3'>&lt;/c3&gt;</ept> when used as a class method, we can ``around'' the resulting name accessor:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Per exemple, per a permetre que <bpt i='2' x='2'>&lt;c2&gt;</bpt>name<ept i='2'>&lt;/c2&gt;</ept> s'utilitzi com un mètode accessor però que segueixi retornant <bpt i='3' x='3'>&lt;c3&gt;</bpt>an unnamed Horse<ept i='3'>&lt;/c3&gt;</ept> quan s'utilitzi com un mètode de classe, podem posar un «around» del mètode accessor resultant:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i='0' x='0'>&lt;c0&gt;</bpt>has<ept i='0'>&lt;/c0&gt;</ept> creates the original behavior.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>El <bpt i='0' x='0'>&lt;c0&gt;</bpt>has<ept i='0'>&lt;/c0&gt;</ept> crear el comportament original.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i='1' x='1'>&lt;c1&gt;</bpt>around<ept i='1'>&lt;/c1&gt;</ept> intercepts the original subroutine name, causing the original coderef to be passed as the first parameter to this new subroutine, which we capture in <bpt i='2' x='2'>&lt;c2&gt;</bpt>$next<ept i='2'>&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>L'<bpt i='1' x='1'>&lt;c1&gt;</bpt>around<ept i='1'>&lt;/c1&gt;</ept> intercepta el nom de la subroutina original, fent que la referència al codi original es passi com a primer paràmetre d'aquesta nova subrutina, que nosaltres capturem a <bpt i='2' x='2'>&lt;c2&gt;</bpt>$next<ept i='2'>&lt;/c2&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The original <bpt i='3' x='3'>&lt;c3&gt;</bpt>$self<ept i='3'>&lt;/c3&gt;</ept> is shifted away, and tested to see if it's an object or not, via <bpt i='4' x='4'>&lt;c4&gt;</bpt>blessed<ept i='4'>&lt;/c4&gt;</ept> (conveniently exported via Moose).</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Desencuem el <bpt i='3' x='3'>&lt;c3&gt;</bpt>$self<ept i='3'>&lt;/c3&gt;</ept> original i el verifiquem per veure si és un objecte o no, via <bpt i='4' x='4'>&lt;c4&gt;</bpt>blessed<ept i='4'>&lt;/c4&gt;</ept> (exportat per Moose convenientment).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For a blessed object, we get the original behavior (a getter or setter), but for a class, we'll get the literal string.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Per a un objecte obtenim el comportament original (un «getter» o «setter»), però per a una classe obtindrem la cadena literal.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>What if we never gave our animal a name?</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Què passa si no li posem un nom al nostre animal?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We'll get warnings about undefined values.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Obtindrem avisos sobre valors indefinits.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We can give a default name just as we did a default color:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Podem assignar un nom predeterminat tal com vam fer amb el color predeterminat:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Again, we'd want that <bpt i='0' x='0'>&lt;c0&gt;</bpt>around<ept i='0'>&lt;/c0&gt;</ept> immediately following this step.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Novament, voldríem aquell <bpt i='0' x='0'>&lt;c0&gt;</bpt>around<ept i='0'>&lt;/c0&gt;</ept> immediatament després d'aquest pas.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If we don't want people setting the color after the initial instance creation, we can declare the attribute as read-only:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Si no volem que la gent canviï el color després de la creació inicial de la instància, declarem l'atribut no modificable:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Now an attempt to set the color is aborted with <bpt i='0' x='0'>&lt;c0&gt;</bpt>Cannot assign a value to a read-only accessor...<ept i='0'>&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Ara un intent de canviar el color s'avortarà amb <bpt i='0' x='0'>&lt;c0&gt;</bpt>Cannot assign a value to a read-only accessor...<ept i='0'>&lt;/c0&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If we really wanted to have a way to occasionally set the color, we can define a separately named <bpt i='1' x='1'>&lt;e1&gt;</bpt>writer<ept i='1'>&lt;/e1&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Si realment volíem una manera de canviar el color ocasionalment, podem definir a banda un anomenat <bpt i='1' x='1'>&lt;e1&gt;</bpt>escriptor<ept i='1'>&lt;/e1&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Thus, we can't change the color of a mouse directly:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>D'aquesta manera no podem canviar el color d'un ratolí directament:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But we can use our private name instead:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Però en canvi podem utilitzar un mètode privat:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>By using a long name, we're less likely to accidentally call it, except where we intentionally want to change the color.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Tot utilitzant un nom llarg és menys probable que el cridem accidentalment, a menys que tinguem la intenció de canviar el color.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Let's create a <bpt i='0' x='0'>&lt;c0&gt;</bpt>RaceHorse<ept i='0'>&lt;/c0&gt;</ept> by adding ``race features'' to a <bpt i='1' x='1'>&lt;c1&gt;</bpt>Horse<ept i='1'>&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Anem a crear un <bpt i='0' x='0'>&lt;c0&gt;</bpt>RaceHorse<ept i='0'>&lt;/c0&gt;</ept> afegint «característiques de carrera» a un <bpt i='1' x='1'>&lt;c1&gt;</bpt>Horse<ept i='1'>&lt;/c1&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>First, we define the ``race features'' as, yes, another role:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Primer definim «característiques de carrera» com, sí, un altre rol:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that since <bpt i='0' x='0'>&lt;c0&gt;</bpt>has<ept i='0'>&lt;/c0&gt;</ept> is just a subroutine call, we can use traditional Perl control structures (here, a <bpt i='1' x='1'>&lt;c1&gt;</bpt>foreach<ept i='1'>&lt;/c1&gt;</ept> loop).</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Com que <bpt i='0' x='0'>&lt;c0&gt;</bpt>has<ept i='0'>&lt;/c0&gt;</ept> és només una crida a una subrutina, fixeu-vos que podem utilitzar estructures de control tradicionals de Perl (aquí, un bucle <bpt i='1' x='1'>&lt;c1&gt;</bpt>foreach<ept i='1'>&lt;/c1&gt;</ept>).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With a bit of code, we've added another four attributes.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Amb una mica de codi hem afegit uns altres quatre atributs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The initial value of <bpt i='2' x='2'>&lt;c2&gt;</bpt>0<ept i='2'>&lt;/c2&gt;</ept> means we don't have to write separate initialization code in our constructor.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>El valor inicial <bpt i='2' x='2'>&lt;c2&gt;</bpt>0<ept i='2'>&lt;/c2&gt;</ept> significa que no ens caldrà escriure per separat codi d'inicialització al nostre constructor.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Next, we can add some accessors:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Tot seguit podem afegir alguns mètodes accessors:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Each call to <bpt i='0' x='0'>&lt;c0&gt;</bpt>won<ept i='0'>&lt;/c0&gt;</ept> increments the number of wins.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Cada crida a <bpt i='0' x='0'>&lt;c0&gt;</bpt>won<ept i='0'>&lt;/c0&gt;</ept> incrementa el número de victòries.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This would be simpler if we presumed that these objects are implemented as hashes (which they are by default), as:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Això seria més senzill si assumíssim que aquests objectes s'implementen amb taules de dispersió (per defecte és així), com ara:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, by using the public interface (a method call), we could change the implementation later to inside-out objects or array-based objects without breaking this code.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Tanmateix, utilitzant la interfície pública (una crida al mètode) podríem canviar més endavant la implementació amb objectes capgirats o objectes basats en matrius sense trencar aquest codi.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is especially important when creating a generic role, which could be mixed in to any kind of object.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Això és especialment important quan es crea un rol genèric, que es podria mesclar amb qualsevol tipus d'objecte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>To create the race horse, we just mix a horse with a racer:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Per a crear la carrera de cavalls només cal que mesclem un cavall amb un corredor:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And now we can ride the ponies:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>I ara ja podem cavalcar els ponis:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>So far, I've just scratched the surface of what <bpt i='0' x='0'>&lt;c0&gt;</bpt>Moose<ept i='0'>&lt;/c0&gt;</ept> provides.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Fins ara només he rascat la superfície del que proporciona <bpt i='0' x='0'>&lt;c0&gt;</bpt>Moose<ept i='0'>&lt;/c0&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Next month, I'll look at some of the more advanced features of <bpt i='1' x='1'>&lt;c1&gt;</bpt>Moose<ept i='1'>&lt;/c1&gt;</ept> that help keep the complex things relatively simple.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>El proper mes miraré algunes de les característiques més avançades de <bpt i='1' x='1'>&lt;c1&gt;</bpt>Moose<ept i='1'>&lt;/c1&gt;</ept> que ajuden a mantenir les coses complexes de manera relativament simple.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Until then, enjoy!</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Fins aleshores, gaudiu!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Randal L. Schwartz is a renowned expert on the Perl programming language (the lifeblood of the Internet), having contributed to a dozen top-selling books on the subject, and over 200 magazine articles.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Randal L. Schwartz és un expert de renom sobre el llenguatge de programació Perl (l'essència vital d'Internet), que ha contribuït en una dotzena de llibres supervendes en la matèria i més de 200 articles en revistes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Schwartz runs a Perl training and consulting company (Stonehenge Consulting Services, Inc of Portland, Oregon), and is a highly sought-after speaker for his masterful stage combination of technical skill, comedic timing, and crowd rapport.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>En Schwartz té una empresa de formació i consultoria en Perl (Stonehenge Consulting Services, Inc de Portland, Oregon) i és un conferenciant molt buscat gràcies a la seva destresa damunt l'escenari, que combina coneixements tècnics, pauses dramàtiques i sintonia amb el públic.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And he's a pretty good Karaoke singer, winning contests regularly.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>I és força bon cantant de Karaoke, que guanya concursos sovint.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Schwartz can be reached for comment at <bpt i='0' x='0'>&lt;a0&gt;</bpt>merlyn@stonehenge.com<ept i='0'>&lt;/a0&gt;</ept> or +1 503 777-0095, and welcomes questions on Perl and other related topics.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Podeu contactar en Schwartz per a comentaris a <bpt i='0' x='0'>&lt;a0&gt;</bpt>merlyn@stonehenge.com<ept i='0'>&lt;/a0&gt;</ept> o al telèfon +1 503 777-0095, i accepta preguntes sobre Perl i d'altres temes relacionats.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The Moose is Flying (part 2) (Jul 07)</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>El Moose està volant (2a part) (juliol 07)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>[suggested title: ``The Moose is Flying (part 2)'']</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>[títol suggerit: «El Moose està volant (2a part)»]</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Last month, I introduced the <bpt i='0' x='0'>&lt;c0&gt;</bpt>Moose<ept i='0'>&lt;/c0&gt;</ept> object system by walking through the code developed in the <bpt i='1' x='1'>&lt;e1&gt;</bpt>perlboot<ept i='1'>&lt;/e1&gt;</ept> manpage, rewriting it to use Moose.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>El mes passat, vaig introduir el sistema d'objectes <bpt i='0' x='0'>&lt;c0&gt;</bpt>Moose<ept i='0'>&lt;/c0&gt;</ept> recorrent el codi desenvolupat a la pàgina de manual de <bpt i='1' x='1'>&lt;e1&gt;</bpt>perlboot<ept i='1'>&lt;/e1&gt;</ept> , reescrivint-ho per utilitzar Moose.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Continuing from that discussion, let's look at some of the features I didn't cover last month.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Continuant a partir d'aquella discussió, fem un cop d'ull a algunes de les característiques que no vaig cobrir el mes passat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Our <bpt i='0' x='0'>&lt;c0&gt;</bpt>Animal<ept i='0'>&lt;/c0&gt;</ept> role included attributes of <bpt i='1' x='1'>&lt;c1&gt;</bpt>name<ept i='1'>&lt;/c1&gt;</ept>, and <bpt i='2' x='2'>&lt;c2&gt;</bpt>color<ept i='2'>&lt;/c2&gt;</ept>, and actions of <bpt i='3' x='3'>&lt;c3&gt;</bpt>speak<ept i='3'>&lt;/c3&gt;</ept> and <bpt i='4' x='4'>&lt;c4&gt;</bpt>eat<ept i='4'>&lt;/c4&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>El nostre rol <bpt i='0' x='0'>&lt;c0&gt;</bpt>Animal<ept i='0'>&lt;/c0&gt;</ept> incloïa atributs de <bpt i='1' x='1'>&lt;c1&gt;</bpt>name<ept i='1'>&lt;/c1&gt;</ept> i <bpt i='2' x='2'>&lt;c2&gt;</bpt>color<ept i='2'>&lt;/c2&gt;</ept>, i mètodes de <bpt i='3' x='3'>&lt;c3&gt;</bpt>speak<ept i='3'>&lt;/c3&gt;</ept> i <bpt i='4' x='4'>&lt;c4&gt;</bpt>eat<ept i='4'>&lt;/c4&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We can add a birthdate attribute to the mix with:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Podem afegir un atribut d'aniversari a la barreja amb:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As we don't want to be able to change the birthdate, we'll make it read-only.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Com que no volem que es pugui canviar la data d'aniversari, farem que sigui no modificable.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>By default, this attribute accepts any scalar, so these are all equally valid:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Per defecte, aquest atribut accepta qualsevol escalar, així que aquests són tots equivalentment vàlids:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We can get a bit of help from Moose to narrow down the permissible type of this new birthdate attribute using Moose's typing system:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Podem aconseguir una mica d'ajuda de Moose per reduir el tipus permès d'aquest nou atribut aniversari utilitzant el sistema de tipus de Moose:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i='0' x='0'>&lt;c0&gt;</bpt>isa<ept i='0'>&lt;/c0&gt;</ept> parameter here declares that the <bpt i='1' x='1'>&lt;c1&gt;</bpt>born<ept i='1'>&lt;/c1&gt;</ept> parameter must be a DateTime object, or at least something that responds true to <bpt i='2' x='2'>&lt;c2&gt;</bpt>UNIVERSAL::isa($thing, &quot;DateTime&quot;)<ept i='2'>&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>El paràmetre <bpt i='0' x='0'>&lt;c0&gt;</bpt>isa<ept i='0'>&lt;/c0&gt;</ept> declara aquí que el paràmetre  <bpt i='1' x='1'>&lt;c1&gt;</bpt>born<ept i='1'>&lt;/c1&gt;</ept>  ha de ser un objecte DateTime, o com a mínim algun tipus que respongui cert a <bpt i='2' x='2'>&lt;c2&gt;</bpt>UNIVERSAL::isa($thing, &quot;DateTime&quot;)<ept i='2'>&lt;/c2&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Now, if we try to put anything in this <bpt i='0' x='0'>&lt;c0&gt;</bpt>born<ept i='0'>&lt;/c0&gt;</ept> attribute other than a <bpt i='1' x='1'>&lt;c1&gt;</bpt>DateTime<ept i='1'>&lt;/c1&gt;</ept>, we get a run-time error.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Ara, si intentem assignar qualsevol cosa a l'atribut <bpt i='0' x='0'>&lt;c0&gt;</bpt>born<ept i='0'>&lt;/c0&gt;</ept> que no sigui un <bpt i='1' x='1'>&lt;c1&gt;</bpt>DateTime<ept i='1'>&lt;/c1&gt;</ept>, obtenim un error en temps d'execució.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>So, this fails:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Així doncs, això falla:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But this succeeds:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Però això funciona:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i='0' x='0'>&lt;c0&gt;</bpt>DateTime<ept i='0'>&lt;/c0&gt;</ept> string for <bpt i='1' x='1'>&lt;c1&gt;</bpt>isa<ept i='1'>&lt;/c1&gt;</ept> refers here to the Perl class.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>La cadena <bpt i='0' x='0'>&lt;c0&gt;</bpt>DateTime<ept i='0'>&lt;/c0&gt;</ept> per <bpt i='1' x='1'>&lt;c1&gt;</bpt>isa<ept i='1'>&lt;/c1&gt;</ept> es refereix aquí a la classe de Perl.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>However, we can also define this as an artificial Moose type:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Tanmateix, també podem definir això com un tipus de Moose artificial:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This works like before, but now identifies <bpt i='0' x='0'>&lt;c0&gt;</bpt>DateTime<ept i='0'>&lt;/c0&gt;</ept> as a Moose-type.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Això funciona com abans, però ara identifica <bpt i='0' x='0'>&lt;c0&gt;</bpt>DateTime<ept i='0'>&lt;/c0&gt;</ept> com un tipus de Moose.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The type is created by starting with any <bpt i='1' x='1'>&lt;c1&gt;</bpt>Object<ept i='1'>&lt;/c1&gt;</ept>, and then requiring that this object pass the additional qualification of being a subclass of Perl's <bpt i='2' x='2'>&lt;c2&gt;</bpt>DateTime<ept i='2'>&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>El tipus es crea començant amb qualsevol <bpt i='1' x='1'>&lt;c1&gt;</bpt>Object<ept i='1'>&lt;/c1&gt;</ept> i després requering que aquest objecte passi la qualificació adicional de ser una subclasse de <bpt i='2' x='2'>&lt;c2&gt;</bpt>DateTime<ept i='2'>&lt;/c2&gt;</ept> de Perl.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>At this point, we could continue to use this Moose-style DateTime type as we had before.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>En aquest punt, podem continuar utilitzant aquest DateTime de Moose com ho fèiem abans.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But once we've done this, we can further subtype the type.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Una vegada hem fet això, podem derivar un subtipus del tipus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, we can require that the date be a historical date (before now):</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Per exemple, podem requerir que la data sigui històrica (prèvia al present):</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Now, not just any DateTime will do.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Ara no funcionarà qualsevol DateTime.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It has to be something that isn't in the future.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Ha de ser algun moment que no sigui al futur.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The expression in <bpt i='0' x='0'>&lt;c0&gt;</bpt>where<ept i='0'>&lt;/c0&gt;</ept> can be any expression returning a true/false value, using <bpt i='1' x='1'>&lt;c1&gt;</bpt>$_<ept i='1'>&lt;/c1&gt;</ept> as a proxy for the object in question.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>L'expressió al <bpt i='0' x='0'>&lt;c0&gt;</bpt>where<ept i='0'>&lt;/c0&gt;</ept> pot ser qualsevol expressió que retorni un valor cert/fals, utilitzant <bpt i='1' x='1'>&lt;c1&gt;</bpt>$_<ept i='1'>&lt;/c1&gt;</ept> com a proxy per a l'objecte en qüestió.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It'd be easier if we could still use casual forms like <bpt i='0' x='0'>&lt;c0&gt;</bpt>yesterday<ept i='0'>&lt;/c0&gt;</ept> and <bpt i='1' x='1'>&lt;c1&gt;</bpt>3/14/1929<ept i='1'>&lt;/c1&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Seria més senzill encara si poguèssim utilitzar expressions informals com <bpt i='0' x='0'>&lt;c0&gt;</bpt>yesterday<ept i='0'>&lt;/c0&gt;</ept> i <bpt i='1' x='1'>&lt;c1&gt;</bpt>3/14/1929<ept i='1'>&lt;/c1&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These are both understood by <bpt i='2' x='2'>&lt;c2&gt;</bpt>Date::Manip<ept i='2'>&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg><bpt i='2' x='2'>&lt;c2&gt;</bpt>Date::Manip<ept i='2'>&lt;/c2&gt;</ept> enten aquestes dues.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We could parse the strings with <bpt i='3' x='3'>&lt;c3&gt;</bpt>Date::Manip<ept i='3'>&lt;/c3&gt;</ept>, then pull out the component values and hand them to <bpt i='4' x='4'>&lt;c4&gt;</bpt>DateTime<ept i='4'>&lt;/c4&gt;</ept>, but luckily, there's already a module to do that: <bpt i='5' x='5'>&lt;c5&gt;</bpt>DateTime::Format::DateManip<ept i='5'>&lt;/c5&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Podem analitzar les cadenes amb <bpt i='3' x='3'>&lt;c3&gt;</bpt>Date::Manip<ept i='3'>&lt;/c3&gt;</ept>, extreure els valors dels components i després entregar-los a <bpt i='4' x='4'>&lt;c4&gt;</bpt>DateTime<ept i='4'>&lt;/c4&gt;</ept>, però afortunadament, ja hi ha un mòdul que fa això: <bpt i='5' x='5'>&lt;c5&gt;</bpt>DateTime::Format::DateManip<ept i='5'>&lt;/c5&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Not bad.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>No està malament.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Our newbie horse is born yesterday, as we expect.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>El nostre aprenent cavall va nèixer ahir, tal com esperàvem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>But it'd be nice to just drop <bpt i='0' x='0'>&lt;c0&gt;</bpt>yesterday<ept i='0'>&lt;/c0&gt;</ept> into the slot and have it do all of that for us.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Però estaria bé simplement posar <bpt i='0' x='0'>&lt;c0&gt;</bpt>yesterday<ept i='0'>&lt;/c0&gt;</ept> al paràmetre i deixar que ho faci tot per nosaltres.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And with <bpt i='1' x='1'>&lt;e1&gt;</bpt>coercions<ept i='1'>&lt;/e1&gt;</ept>, we can.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>I amb <bpt i='1' x='1'>&lt;e1&gt;</bpt>coercions<ept i='1'>&lt;/e1&gt;</ept>, podem fer-ho.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Since passing a simple string as the birthtime is illegal, we can inform Moose that it should take that string and run it through <bpt i='0' x='0'>&lt;c0&gt;</bpt>DateTime::Format::DateManip<ept i='0'>&lt;/c0&gt;</ept> automatically:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Com que passar una cadena com a aniversari no està permés, podem indicar a Moose que agafi la cadena i la passi per  <bpt i='0' x='0'>&lt;c0&gt;</bpt>DateTime::Format::DateManip<ept i='0'>&lt;/c0&gt;</ept> automàticament:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The <bpt i='0' x='0'>&lt;c0&gt;</bpt>via<ept i='0'>&lt;/c0&gt;</ept> code block takes <bpt i='1' x='1'>&lt;c1&gt;</bpt>$_<ept i='1'>&lt;/c1&gt;</ept> as the input value, which is expected to be a string (<bpt i='2' x='2'>&lt;c2&gt;</bpt>Str<ept i='2'>&lt;/c2&gt;</ept>).</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>El bloc <bpt i='0' x='0'>&lt;c0&gt;</bpt>via<ept i='0'>&lt;/c0&gt;</ept> agafa <bpt i='1' x='1'>&lt;c1&gt;</bpt>$_<ept i='1'>&lt;/c1&gt;</ept> com un valor d'entrada, que s'espera que sigui una cadena (<bpt i='2' x='2'>&lt;c2&gt;</bpt>Str<ept i='2'>&lt;/c2&gt;</ept>).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The last expression evaluated in the code is the new <bpt i='3' x='3'>&lt;c3&gt;</bpt>HistoricalDateTime<ept i='3'>&lt;/c3&gt;</ept> value.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>L'última expressió avaluada al codi és el nou valor <bpt i='3' x='3'>&lt;c3&gt;</bpt>HistoricalDateTime<ept i='3'>&lt;/c3&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We then permit this coercion to be used by adding <bpt i='4' x='4'>&lt;c4&gt;</bpt>coerce<ept i='4'>&lt;/c4&gt;</ept> into the attribute declaration:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Després permetem l'ús d'aquesta coacció afegint <bpt i='4' x='4'>&lt;c4&gt;</bpt>coerce<ept i='4'>&lt;/c4&gt;</ept>  a la declaració de l'atribut:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Now, the <bpt i='0' x='0'>&lt;c0&gt;</bpt>born<ept i='0'>&lt;/c0&gt;</ept> slot accepts either an explicit <bpt i='1' x='1'>&lt;c1&gt;</bpt>DateTime<ept i='1'>&lt;/c1&gt;</ept> as before, or a simple string.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Ara el paràmetre <bpt i='0' x='0'>&lt;c0&gt;</bpt>born<ept i='0'>&lt;/c0&gt;</ept> accepta o bé un <bpt i='1' x='1'>&lt;c1&gt;</bpt>DateTime<ept i='1'>&lt;/c1&gt;</ept> explícit com abans, o bé una cadena simple.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The string must be acceptable to <bpt i='2' x='2'>&lt;c2&gt;</bpt>Date::Manip<ept i='2'>&lt;/c2&gt;</ept>, which will be used to convert the string into a <bpt i='3' x='3'>&lt;c3&gt;</bpt>DateTime<ept i='3'>&lt;/c3&gt;</ept> object as our object is created.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>La cadena ha de ser acceptable per <bpt i='2' x='2'>&lt;c2&gt;</bpt>Date::Manip<ept i='2'>&lt;/c2&gt;</ept>, que serà utilitzat per convertir la cadena a un objecte <bpt i='3' x='3'>&lt;c3&gt;</bpt>DateTime<ept i='3'>&lt;/c3&gt;</ept> quan el nostre objecte sigui creat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Also, because the type constraint is still in place, the verification to ensure the result is a historical date is still active.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>A més, com que la coacció de tipus està a lloc, la verificació per assegurar que el resultat és una data històrica encara està activa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Besides the named classes and <bpt i='0' x='0'>&lt;c0&gt;</bpt>Str<ept i='0'>&lt;/c0&gt;</ept>, <bpt i='1' x='1'>&lt;c1&gt;</bpt>Moose::Util::TypeConstraints<ept i='1'>&lt;/c1&gt;</ept> also establishes types of things like <bpt i='2' x='2'>&lt;c2&gt;</bpt>Bool<ept i='2'>&lt;/c2&gt;</ept> and <bpt i='3' x='3'>&lt;c3&gt;</bpt>HashRef<ept i='3'>&lt;/c3&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>A més dels noms de les classes i <bpt i='0' x='0'>&lt;c0&gt;</bpt>Str<ept i='0'>&lt;/c0&gt;</ept>, <bpt i='1' x='1'>&lt;c1&gt;</bpt>Moose::Util::TypeConstraints<ept i='1'>&lt;/c1&gt;</ept> també estableix els tipus de coses com <bpt i='2' x='2'>&lt;c2&gt;</bpt>Bool<ept i='2'>&lt;/c2&gt;</ept> i <bpt i='3' x='3'>&lt;c3&gt;</bpt>HashRef<ept i='3'>&lt;/c3&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We could even have multiple coercions defined, as long as they are distinct.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Fins i tot podríem tenir múltiples coaccions definides, sempre i quan siguin diferents.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, we could use a hashref in the birthtime slot to indicate that we are passing key/value pairs to be handed to a <bpt i='0' x='0'>&lt;c0&gt;</bpt>DateTime<ept i='0'>&lt;/c0&gt;</ept> constructor directly:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Per exemple, podem utilitzar una referència a una taula de dispersió al paràmetre aniversari per indicar que estem passant parells clau/valor perquè siguin entregats directament a un constructor <bpt i='0' x='0'>&lt;c0&gt;</bpt>DateTime<ept i='0'>&lt;/c0&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And now we can use a hashref to define the birthdate:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>I ara podem definir una referència a una taula de dispersió per definir l'aniversari:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the value for <bpt i='0' x='0'>&lt;c0&gt;</bpt>born<ept i='0'>&lt;/c0&gt;</ept> is a <bpt i='1' x='1'>&lt;c1&gt;</bpt>DateTime<ept i='1'>&lt;/c1&gt;</ept>, it's used directly.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Si el valor per a <bpt i='0' x='0'>&lt;c0&gt;</bpt>born<ept i='0'>&lt;/c0&gt;</ept> és un <bpt i='1' x='1'>&lt;c1&gt;</bpt>DateTime<ept i='1'>&lt;/c1&gt;</ept>, s'utilitza directament.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If it's a string, it's passed to <bpt i='2' x='2'>&lt;c2&gt;</bpt>DateTime::Format::DateManip<ept i='2'>&lt;/c2&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Si és una cadena, es passa a <bpt i='2' x='2'>&lt;c2&gt;</bpt>DateTime::Format::DateManip<ept i='2'>&lt;/c2&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And if it's a hashref, it's passed directly as a flattened list to the <bpt i='3' x='3'>&lt;c3&gt;</bpt>DateTime<ept i='3'>&lt;/c3&gt;</ept> constructor.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>I si és una referència a una taula de dispersió, es passa directament com una llista aplanada al constructor <bpt i='3' x='3'>&lt;c3&gt;</bpt>DateTime<ept i='3'>&lt;/c3&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Very cool.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Genial.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The value we specify for a <bpt i='0' x='0'>&lt;c0&gt;</bpt>default<ept i='0'>&lt;/c0&gt;</ept> is subject to the same coercions and type checking.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>El valor que especifiquem per a <bpt i='0' x='0'>&lt;c0&gt;</bpt>default<ept i='0'>&lt;/c0&gt;</ept> està subjecte a les mateixes coaccions i comprovacions de tipus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We can update <bpt i='1' x='1'>&lt;c1&gt;</bpt>born<ept i='1'>&lt;/c1&gt;</ept> as:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Podem actualitzar <bpt i='1' x='1'>&lt;c1&gt;</bpt>born<ept i='1'>&lt;/c1&gt;</ept> a:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>And now our animals default to being ``born yesterday''.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>I ara, el valor per defecte dels animals a ``nascut ahir''.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that the default value is still subject to the type constraints, so if we replace <bpt i='0' x='0'>&lt;c0&gt;</bpt>yesterday<ept i='0'>&lt;/c0&gt;</ept> with <bpt i='1' x='1'>&lt;c1&gt;</bpt>tomorrow<ept i='1'>&lt;/c1&gt;</ept>, the default value will be rejected properly.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Observeu que el valor per defecte encara està subjecte a les restriccions de tipus, per tant si substituïm <bpt i='0' x='0'>&lt;c0&gt;</bpt>yesterday<ept i='0'>&lt;/c0&gt;</ept> per <bpt i='1' x='1'>&lt;c1&gt;</bpt>tomorrow<ept i='1'>&lt;/c1&gt;</ept>, el valor per defecte serà rebutjat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that the coercion happens as each object is created, so a default value of <bpt i='2' x='2'>&lt;c2&gt;</bpt>one minute ago<ept i='2'>&lt;/c2&gt;</ept> will give us a new time each time it is called.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Observeu que la coacció passa a mesura que cada objecte es crea, per tant el valor per defecte <bpt i='2' x='2'>&lt;c2&gt;</bpt>one minute ago<ept i='2'>&lt;/c2&gt;</ept> ens donarà una data diferent cada vegada que sigui cridat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>While we're on things we can do to attributes, another interesting item is <bpt i='0' x='0'>&lt;c0&gt;</bpt>lazy<ept i='0'>&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Mentre estudiem què podem fer als atributs, un altre element interessant és <bpt i='0' x='0'>&lt;c0&gt;</bpt>lazy<ept i='0'>&lt;/c0&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If the default value is expensive to compute, we can say ``don't really do this until you need to do it''.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Si el valor per defecte és car de calcular, podem dir ``no facis això fins que ho necessitis''.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, turning <bpt i='1' x='1'>&lt;c1&gt;</bpt>yesterday<ept i='1'>&lt;/c1&gt;</ept> into a DateTime is slightly expensive, so we can flag that as lazy:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Per exemple, convertir <bpt i='1' x='1'>&lt;c1&gt;</bpt>yesterday<ept i='1'>&lt;/c1&gt;</ept> a un objecte DateTime és una mica car, així que ho podem marcar com lazy:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Speaking of great support, as I was writing that last paragraph, I noticed a bug in the result, and chatting with Stevan on IRC got it fixed before I could turn this article in.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>I parlant de suport fantàstic, mentre escrivia aquest últim pàrraf vaig descobrir un error de programació, i commentar-ho amb Stevan a l'IRC ho va solucionar abans que jo entregués l'article.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Yeay.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Visca.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Anything built with <bpt i='0' x='0'>&lt;c0&gt;</bpt>Moose<ept i='0'>&lt;/c0&gt;</ept> has a very high degree of introspection available.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Qualsevol cosa construïda amb <bpt i='0' x='0'>&lt;c0&gt;</bpt>Moose<ept i='0'>&lt;/c0&gt;</ept> té disponible un grau molt alt d'introspecció.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, we can ask one of our animal friends to give us the <bpt i='1' x='1'>&lt;c1&gt;</bpt>meta<ept i='1'>&lt;/c1&gt;</ept> object, with which we can make further requests:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Per exemple, podem demanar a un dels nostres amics animals que ens doni l'objecte <bpt i='1' x='1'>&lt;c1&gt;</bpt>meta<ept i='1'>&lt;/c1&gt;</ept>, amb el què podrem fer més peticions:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We can ask the horse for the <bpt i='2' x='2'>&lt;e2&gt;</bpt>roles<ept i='2'>&lt;/e2&gt;</ept>:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Podem demanar al cavall per els <bpt i='2' x='2'>&lt;e2&gt;</bpt>roles<ept i='2'>&lt;/e2&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In this case, we see that we've mixed in one role (of type <bpt i='0' x='0'>&lt;c0&gt;</bpt>Moose::Meta::Role<ept i='0'>&lt;/c0&gt;</ept>, and get the name with:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>En aquest cas, veiem que hem obtingut un rol (de tipus <bpt i='0' x='0'>&lt;c0&gt;</bpt>Moose::Meta::Role<ept i='0'>&lt;/c0&gt;</ept>), i aconseguit el nom amb:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>which gives us <bpt i='0' x='0'>&lt;c0&gt;</bpt>Animal<ept i='0'>&lt;/c0&gt;</ept> as we might expect.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>cosa que ens dona un <bpt i='0' x='0'>&lt;c0&gt;</bpt>Animal<ept i='0'>&lt;/c0&gt;</ept> tal com esperàvem.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We can also ask the meta object for all applicable methods:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Podem demanar a l'objecte meta tots els mètodes aplicables:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>which returns</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>cosa que retorna</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Nice.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Genial.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Not sure what BEGIN is doing in there, but the rest are things that we've defined.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>No estic segur de què fa BEGIN aquí, però la resta són elements que hem definit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Many of these methods relate to the attributes, but we'd can query those definitively using <bpt i='0' x='0'>&lt;c0&gt;</bpt>compute_all_applicable_attributes<ept i='0'>&lt;/c0&gt;</ept> instead:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Molts d'aquests mètodes es relacionen amb atributs, però podem demanar aquests definitivament utilitzant <bpt i='0' x='0'>&lt;c0&gt;</bpt>compute_all_applicable_attributes<ept i='0'>&lt;/c0&gt;</ept>:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The result is a set of <bpt i='0' x='0'>&lt;c0&gt;</bpt>Moose::Meta::Attribute<ept i='0'>&lt;/c0&gt;</ept> objects.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>El resultat és un conjunt d'objectes <bpt i='0' x='0'>&lt;c0&gt;</bpt>Moose::Meta::Attribute<ept i='0'>&lt;/c0&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We can map them through <bpt i='1' x='1'>&lt;c1&gt;</bpt>name<ept i='1'>&lt;/c1&gt;</ept> as before to get the names:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Podem utilitzar el «map« sobre <bpt i='1' x='1'>&lt;c1&gt;</bpt>name<ept i='1'>&lt;/c1&gt;</ept> com abans per aconseguir els noms:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We can also see if they have setters:</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>També podem veure si tenen «setters»:</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Note that only <bpt i='0' x='0'>&lt;c0&gt;</bpt>color<ept i='0'>&lt;/c0&gt;</ept> has a setter: the other two are read-only, so this makes sense.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Observeu que només <bpt i='0' x='0'>&lt;c0&gt;</bpt>color<ept i='0'>&lt;/c0&gt;</ept> té un «setter»: els altres dos no són modificables, així que això té sentit.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>As noted above, Moose is still being actively developed, but is <bpt i='0' x='0'>&lt;e0&gt;</bpt>production ready<ept i='0'>&lt;/e0&gt;</ept> as long as you stick with things that work.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Tal com s'ha comentat abans, Moose encara està sent desenvolupat de forma activa, però és <bpt i='0' x='0'>&lt;e0&gt;</bpt>production ready<ept i='0'>&lt;/e0&gt;</ept> mentre us mantingueu en les coses que funcionen.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You'll find the latest Moose in the CPAN, along with some other core plugins, typically in the <bpt i='1' x='1'>&lt;c1&gt;</bpt>MooseX<ept i='1'>&lt;/c1&gt;</ept> namespace.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Trobareu l'últim Moose al CPAN, juntament amb algun altre complement base, normalment a l'espai de noms <bpt i='1' x='1'>&lt;c1&gt;</bpt>MooseX<ept i='1'>&lt;/c1&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, <bpt i='0' x='0'>&lt;c0&gt;</bpt>MooseX::Getopt<ept i='0'>&lt;/c0&gt;</ept> allows you to define your <bpt i='1' x='1'>&lt;c1&gt;</bpt>@ARGV<ept i='1'>&lt;/c1&gt;</ept> processing using type coercion, type constraints, and all that jazz.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Per exemple, <bpt i='0' x='0'>&lt;c0&gt;</bpt>MooseX::Getopt<ept i='0'>&lt;/c0&gt;</ept> us permet definir el vostre procés de <bpt i='1' x='1'>&lt;c1&gt;</bpt>@ARGV<ept i='1'>&lt;/c1&gt;</ept> utilitzant coacció de tipus, restriccions de tipus, i totes aquestes coses.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>I haven't had time to play with that yet, but it's on my to-do list, so perhaps I'll cover that in a future column.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>No he tingut temps per jugar-hi encara, però està a la meva llista de coses pendents, així que potser en parlaré a una columna futura.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Similarly, <bpt i='0' x='0'>&lt;c0&gt;</bpt>MooseX::Object::Pluggable<ept i='0'>&lt;/c0&gt;</ept> makes it easy to write classes that are <bpt i='1' x='1'>&lt;e1&gt;</bpt>pluggable<ept i='1'>&lt;/e1&gt;</ept>, meaning that they can work well with plugins that define additional methods and attributes.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>De forma similar, <bpt i='0' x='0'>&lt;c0&gt;</bpt>MooseX::Object::Pluggable<ept i='0'>&lt;/c0&gt;</ept> simplifica l'escriptura de classes que són <bpt i='1' x='1'>&lt;e1&gt;</bpt>pluggable<ept i='1'>&lt;/e1&gt;</ept>, que significa que poden treballar bé amb complements que defineixen mètodes i atributs adicionals.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(Think of a generic web server or IRC bot object that has individually selectable additional behaviors.) Again, I'm just noticing these, and they look like they are worthy of their own descriptions later.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>(Penseu en un servidor web genèric o un «bot« IRC que té comportaments adicionals seleccionables individualment.) De nou, m'estic adonant ara d'aquests, i sembla que valgui la pena fer-ne una descripció especial més tard.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Also note that <bpt i='0' x='0'>&lt;c0&gt;</bpt>Moose<ept i='0'>&lt;/c0&gt;</ept> is itself built on <bpt i='1' x='1'>&lt;c1&gt;</bpt>Class::MOP<ept i='1'>&lt;/c1&gt;</ept>, which is a framework for making class frameworks.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Observeu a més que el mateix <bpt i='0' x='0'>&lt;c0&gt;</bpt>Moose<ept i='0'>&lt;/c0&gt;</ept> està construit sobre <bpt i='1' x='1'>&lt;c1&gt;</bpt>Class::MOP<ept i='1'>&lt;/c1&gt;</ept>, que és un entorn de treball per crear entorns de treball de classes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Perhaps other projects besides Moose will be using Class::MOP as a starting point as well.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Potser altres projectes a més de Moose també utilitzaran Class::MOP com a punt de partida.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, the infrastructure of <bpt i='2' x='2'>&lt;c2&gt;</bpt>Class::Prototyped<ept i='2'>&lt;/c2&gt;</ept> (which I use in my own <bpt i='3' x='3'>&lt;c3&gt;</bpt>CGI::Prototype<ept i='3'>&lt;/c3&gt;</ept>) might be built on <bpt i='4' x='4'>&lt;c4&gt;</bpt>Class::MOP<ept i='4'>&lt;/c4&gt;</ept>, giving it more flexibility and robustness.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Per exemple, l'infraestructura de <bpt i='2' x='2'>&lt;c2&gt;</bpt>Class::Prototyped<ept i='2'>&lt;/c2&gt;</ept> (que utilitzo al meu <bpt i='3' x='3'>&lt;c3&gt;</bpt>CGI::Prototype<ept i='3'>&lt;/c3&gt;</ept>) podria construir-se sobre <bpt i='4' x='4'>&lt;c4&gt;</bpt>Class::MOP<ept i='4'>&lt;/c4&gt;</ept>, proporcionant més flexibilitat i robustesa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>I hope you've enjoyed this two-part introduction to <bpt i='0' x='0'>&lt;c0&gt;</bpt>Moose<ept i='0'>&lt;/c0&gt;</ept>.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Espero que hagueu gaudit d'aquesta introducció en dues parts a <bpt i='0' x='0'>&lt;c0&gt;</bpt>Moose<ept i='0'>&lt;/c0&gt;</ept>.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Have fun playing with a production-ready flexible object-building system.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Divertiu-vos jugant amb un sistema de construcció d'objectes flexible preparat per a producció.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Until next time, enjoy!</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Fins aleshores, gaudiu!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>=head1 NAME</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>=head1 NAME/NOM</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>=head1 AUTHOR</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>=head1 AUTOR</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>=head1 COPYRIGHT AND LICENSE</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>=head1 COPYRIGHT I LLICÈNCIA</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Aquesta llibreria és programari lliure; podeu redistribuir-la i/o modificar-la amb les mateixes condicions del propi Perl.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Moose::Manual::Concepts - Moose OO concepts</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Moose::Manual::Concepts - Conceptes d'OO a Moose</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>=head1 MOOSE CONCEPTS (VS &quot;OLD SCHOOL&quot; Perl)</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>=head1 CONCEPTES DE MOOSE (contra Perl &quot;de la vella escola&quot;)</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In the past, you may not have thought too much about the difference
between packages and classes, attributes and methods, constructors and
methods, etc.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>En el passat potser no heu pensat massa en la diferència entre paquets i classes, atributs i mètodes, constructors i mètodes, etc.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With Moose, these are all conceptually separate things,
even though under the hood they're implemented with plain old Perl.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Amb Moose totes aquestes són coses conceptualment separades, tot i que internament s'implementa amb Perl tradicional.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Our meta-object protocol (aka MOP) provides well-defined introspection
features for each of those concepts, and Moose in turn provides
distinct sugar for each of them.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>El nostre protocol de meta-objectes (també conegut com MOP) ofereix característiques d'introspecció ben definides per a cadascun d'aquests conceptes, i al seu torn Moose ofereix una diferent sintaxi ensucrada per a cadascun d'ells.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Moose also introduces additional
concepts such as roles, method modifiers, and declarative delegation.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Moose també introdueix conceptes addicionals com ara els rols, els modificadors de mètodes i la delegació declarativa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Knowing what these concepts mean in Moose-speak, and how they used to
be done in old school Perl 5 OO is a good way to start learning to use
Moose.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Conèixer el que volen dir aquests conceptes en l'argot de Moose i com s'acostumaven a utilitzar en l'OO de Perl 5 de la vella escola és una bona manera de començar a aprendre a utilitzar Moose.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>=head2 Class</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>=head2 Classe</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you say &quot;use Moose&quot; in a package, you are making your package a
class.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Quan dieu &quot;use Moose&quot; en un paquet, esteu convertint en vostre paquet en una classe.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>At its simplest, a class will consist simply of attributes
and/or methods.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>La manera més simple de definir una classe consistirà únicament d'atributs i/o mètodes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It can also include roles, method modifiers, and more.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>També pot incloure rols, modificadors de mètodes i més.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A class I&lt;has&gt; zero or more B&lt;attributes&gt;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Una classe I&lt;té&gt; zero o més B&lt;atributs&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A class I&lt;has&gt; zero or more B&lt;methods&gt;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Una classe I&lt;té&gt; zero o més B&lt;mètodes&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A class I&lt;has&gt; zero or more superclasses (aka parent classes).</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Una classe I&lt;té&gt; zero o més superclasses (o classes pare).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A
class inherits from its superclass(es).</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Una classe hereta de les seves superclasses.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A class I&lt;has&gt; zero or more B&lt;method modifiers&gt;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Una classe I&lt;té&gt; zero o més B&lt;modificadors de mètodes&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These modifiers can
apply to its own methods or methods that are inherited from its
ancestors.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Aquests modificadors es poden aplicar als seus propis mètodes o als mètodes heretats dels seus ancestres.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A class I&lt;does&gt; (and I&lt;consumes&gt;) zero or more B&lt;roles&gt;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Una classe I&lt;fa&gt; (i I&lt;consumeix&gt;) zero o més B&lt;rols&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A class I&lt;has&gt; a B&lt;constructor&gt; and a B&lt;destructor&gt;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Una classe I&lt;té&gt; un B&lt;constructor&gt; i un B&lt;destructor&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These are
provided for you &quot;for free&quot; by Moose.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Aquests us els ofereix Moose de franc.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>The B&lt;constructor&gt; accepts named parameters corresponding to the
class's attributes and uses them to initialize an B&lt;object instance&gt;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>El B&lt;constructor&gt; accepta paràmetres amb nom que corresponguin als atributs de la classe i els utilitza per inicialitzar una B&lt;instància de l'objecte&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A class I&lt;has&gt; a B&lt;metaclass&gt;, which in turn has B&lt;meta-attributes&gt;,
B&lt;meta-methods&gt;, and B&lt;meta-roles&gt;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Una classe I&lt;té&gt; una B&lt;meta-classe&gt;, que al seu torn té B&lt;meta-atributs&gt;, B&lt;meta-mètodes&gt;, i B&lt;meta-rols&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This metaclass I&lt;describes&gt; the
class.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Aquesta meta-classe I&lt;descriu&gt; la classe.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A class is usually analogous to a category of nouns, like &quot;People&quot; or
&quot;Users&quot;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Una classe normalment és anàloga a una categoria de noms, com ara &quot;Persones&quot; o &quot;Usuaris&quot;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg># now it's a Moose class!</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg># ara és una classe de Moose!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>=head2 Attribute</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>=head2 Atribut</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An attribute is a property of the class that defines it.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Un atribut és una propietat que defineix una classe.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It I&lt;always&gt;
has a name, and it I&lt;may have&gt; a number of other properties.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>I&lt;Sempre&gt; té un nom i I&lt;pot tenir&gt; d'altres propietats.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These properties can include a read/write flag, a B&lt;type&gt;, accessor
method names, B&lt;delegations&gt;, a default value, and more.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Aquestes propietats inclouen un indicador de lectura/escriptura, un B&lt;tipus&gt;, noms dels mètodes accessors, B&lt;delegacions&gt;, un valor predeterminat, i més.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Attributes I&lt;are not&gt; methods, but defining them causes various
accessor methods to be created.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Els atributs I&lt;no són&gt; mètodes, però en definir-los es creen diversos mètodes accessors.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>At a minimum, a normal attribute will
always have a reader accessor method.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Com a mínim, un atribut normal tindrà sempre un mètode accessor de lectura.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Many attributes also have other
methods, such as a writer method, clearer method, and predicate method
(&quot;has it been set?&quot;).</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Molts atributs també tenen altres mètodes, com ara un mètode d'escriptura, un mètode de neteja, i un mètode de predicat (&quot;s'ha establert?&quot;).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An attribute may also define B&lt;delegations&gt;, which will create
additional methods based on the delegation mapping.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Un atribut també pot definir B&lt;delegacions&gt;, que crearan mètodes addicionals basats en el mapatge de delegacions.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>By default, Moose stores attributes in the object instance, which is a
hashref, I&lt;but this is invisible to the author of a Moose-based
class&gt;!</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Per defecte, Moose emmagatzema els atributs a la instància de l'objecte, què és una referència a una taula de dispersió, I&lt;però això és invisible a l'autor d'una classe basada en Moose&gt;!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It is best to think of Moose attributes as &quot;properties&quot; of
the I&lt;opaque&gt; B&lt;object instance&gt;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>És millor pensar en els atributs de Moose com a &quot;propietats&quot; de la B&lt;instància I&lt;opaca&gt; de l'objecte&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These properties are accessed
through well-defined accessor methods.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Aquestes propietats s'accedeixen mitjançant mètodes accessors ben definits.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An attribute is something that the class's members have.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Un atribut és quelcom que tenen els membres de la classe.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example,
People have first and last names.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Per exemple, les persones tenen nom i cognom.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Users have passwords and last login
datetimes.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Els usuaris tenen contrasenyes i la data i hora de darrera connexió.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>=head2 Method</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>=head2 Mètode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A B&lt;method&gt; is very straightforward.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Un B&lt;mètode&gt; és força pim pam.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Any subroutine you define in your
class is a method.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Qualsevol subrutina que definiu a la vostra classe és un mètode.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>B&lt;Methods&gt; correspond to verbs, and are what your objects can do.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Els B&lt;mètodes&gt; es corresponen amb verbs i són el que els vostres objectes poden fer.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For
example, a User can login.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Per exemple, un Usuari pot connectar-se.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>=head2 Roles</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>=head2 Rols</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A role is something that a class I&lt;does&gt;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Un rol és quelcom que una classe I&lt;fa&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>We also say that classes
I&lt;consume&gt; roles.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Diem que les classes I&lt;consumeixen&gt; rols.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, a Machine class might do the Breakable
role, and so could a Bone class.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Per exemple, una classe Màquina podria fer el rol Trencable, tal com podria fer-ho una classe Os.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A role is used to define some concept
that cuts across multiple unrelated classes, like &quot;breakability&quot;, or
&quot;has a color&quot;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Un rol s'utilitza per definit algun concepte que s'aplica a múltiples classes que no estan relacionades, com ara la &quot;trencabilitat&quot;, o
&quot;té un color&quot;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A role I&lt;has&gt; zero or more B&lt;attributes&gt;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Un rol I&lt;té&gt; zero o més B&lt;atributs&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A role I&lt;has&gt; zero or more B&lt;methods&gt;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Un rol I&lt;té&gt; zero o més B&lt;mètodes&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A role I&lt;has&gt; zero or more B&lt;method modifiers&gt;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Un rol I&lt;té&gt; zero o més B&lt;modificadors de mètode&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A role I&lt;has&gt; zero or more B&lt;required methods&gt;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Un rol I&lt;té&gt; zero o més B&lt;mètodes necessaris&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A required method is not implemented by the role.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Un mètode necessari no s'implementa dins el rol.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Required methods say
&quot;to use this Role you must implement this method&quot;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Els mètodes necessaris diuen &quot;per utilitzar aquest Rol heu d'implementar aquest mètode&quot;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A role I&lt;has&gt; zero or more B&lt;excluded roles&gt;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Un rol I&lt;té&gt; zero o més B&lt;rols exclosos&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An excluded role is a role that the role doing the excluding says it
cannot be combined with.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Un rol exclós és un rol que no es pot combinar amb el rol que indica l'exclusió.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Roles are I&lt;composed&gt; into classes (or other roles).</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Els rols es I&lt;composen&gt; dins de les classes (o d'altres rols).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When a role is
composed into a class, its attributes and methods are &quot;flattened&quot; into
the class.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Quan un rol es composa dins d'una classe els seus atributs i els seus mètodes se &quot;simplifiquen&quot; dins de la classe.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Roles I&lt;do not&gt; show up in the inheritance hierarchy.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Els rols I&lt;no&gt; apareixen a la jerarquia de l'herència.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When
a role is composed, its attributes and methods appear as if they were
defined I&lt;in the consuming class&gt;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Quan es composa un rol els seus atributs i mètodes apareixen com si s'haguessin definit I&lt;a la classe que el consumeix&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Role are somewhat like mixins or interfaces in other OO languages.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Els rols són quelcom semblant als I&lt;mixins&gt; o les interfícies en altres llenguatges amb OO.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>=head2 Method modifiers</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>=head2 Modificadors de mètode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A B&lt;method modifier&gt; is a hook that is called when a named method is
called.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Un B&lt;modificador de mètode&gt; és un ganxo que es crida quan es crida un mètode amb nom.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, you could say &quot;before calling C&lt;login()&gt;, call
this modifier first&quot;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Per exemple, podeu dir &quot;abans de cridar C&lt;login()&gt;, primer crideu aquest modificador&quot;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Modifiers come in different flavors like
&quot;before&quot;, &quot;after&quot;, &quot;around&quot;, and &quot;augment&quot;, and you can apply more
than one modifier to a single method.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Els modificadors tenen diferents aspectes com ara &quot;before&quot;, &quot;after&quot;, &quot;around&quot;, i &quot;augment&quot;, i podeu aplicar més d'un modificador a un sol mètode.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Method modifiers are often used as an alternative to overriding a
method in a parent class.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Els modificadors de mètode s'utilitzen sovint com a alternativa a sobreescriure un mètode d'una classe pare.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>They are also used in roles as a way of
modifying methods in the consuming class.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>També s'utilitzen als rols com una manera de modificar els mètodes a la classe que els consumeix.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Under the hood, a method modifier is just a plain old Perl subroutine
that gets called before or after (or around, etc.) some named method.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Internament, un modificador de mètode és una subrutina tradicional de Perl que s'executa abans o després (o enmig, etc.) d'algun mètode amb nom.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>=head2 Type</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>=head2 Tipus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Moose also comes with a (miniature) type system.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Moose també duu un sistema de tipus (en miniatura).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This allows you to
define types for attributes.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Això us permet definir tipus per als atributs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Moose has a set of built-in types based
on what Perl provides, such as C&lt;Str&gt;, C&lt;Num&gt;, C&lt;Bool&gt;, C&lt;HashRef&gt;, etc.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Moose té un conjunt de tipus integrats que es basen en el que ofereix Perl, com ara C&lt;Str&gt;, C&lt;Num&gt;, C&lt;Bool&gt;, C&lt;HashRef&gt;, etc.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In addition, every class name in your application can also be used as
a type name.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Addicionalment, cada nom de classe de la vostra aplicació també es pot utilitzar com un nom de tipus.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Finally, you can define your own types, either as subtypes or entirely
new types, with their own constraints.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Finalment, podeu definir els vostres propis tipus, ja siguin subtipus o tipus totalment nous, amb les seves pròpies restriccions.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, you could define a
type C&lt;PosInt&gt;, a subtype of C&lt;Int&gt; which only allows positive numbers.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Per exemple, podeu definir un tipus C&lt;PosInt&gt;, un subtipus d'C&lt;Int&gt; que només permet números positius.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>=head2 Delegation</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>=head2 Delegació</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Moose attributes provide declarative syntax for defining
delegations.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Els atributs de Moose ofereixen una sintaxi declarativa per a definir les delegacions.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A delegation is a method which calls some method on an
attribute to do its real work.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Una delegació és un mètode que crida algun altre mètode d'un atribut per a fer la feina de veritat.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A constructor creates an B&lt;object instance&gt; for the class.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Un constructor crea una B&lt;instància de l'objecte&gt; per a una classe.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In old
school Perl, this was usually done by defining a method called
C&lt;new()&gt; which in turn called C&lt;bless&gt; on a reference.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>En Perl de la vella escola això es feia normalment definint un mètode anomenat C&lt;new()&gt;, que al seu torn cridava C&lt;bless&gt; sobre una referència.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With Moose, this C&lt;new()&gt; method is created for you, and it simply
does the right thing.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Amb Moose, aquest mètode C&lt;new()&gt; es crea per a vosaltres i simplement fa el que ha de fer.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You should never need to define your own
constructor!</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>No us hauria de caldre mai definir el vostre propi constructor!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Sometimes you want to do something whenever an object is created.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>De vegades voleu fer alguna cosa quan es crea un objecte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In
those cases, you can provide a C&lt;BUILD()&gt; method in your class.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>En aquests casos podeu definir el mètode C&lt;BUILD()&gt; a la vostra classe.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Moose
will call this for you after creating a new object.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Moose el cridarà just després de crear un nou objecte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This is a special method called when an object instance goes out of
scope.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Aquest és un mètode especial que es crida quan una instància de l'objecte surt fora de context.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>You can specialize what your class does in this method if you
need to, but you usually don't.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Podeu refinar el que fa la vostra classe en aquest mètode si us cal, però normalment no us caldrà.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With old school Perl 5, this is the C&lt;DESTROY()&gt; method, but with
Moose it is the C&lt;DEMOLISH()&gt; method.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Amb el Perl de la vella escola s'utilitzava el mètode C&lt;DESTROY()&gt;, però amb Moose és el mètode C&lt;DEMOLISH()&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>=head2 Object instance</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>=head2 Herència d'objectes</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An object instance is a specific noun in the class's &quot;category&quot;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Una instància de l'objecte és un nom específic a la &quot;categoria&quot; de la classe.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For
example, one specific Person or User.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Per exemple, una Persona o un Usuari específics.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An instance is created by the
class's B&lt;constructor&gt;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Una instància es crea amb el B&lt;constructor&gt; de la classe.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>An instance has values for its attributes.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Una instància té valors per als seus atributs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, a specific
person has a first and last name.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Per exemple, una persona específica té un nom i un cognom.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>In old school Perl 5, this is often a blessed hash reference.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Amb Perl de la vella escola això normalment seria una referència beneïda a una taula de dispersió.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With
Moose, you should never need to know what your object instance
actually is.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Amb Moose no us hauria de caldre mai saber quina és la vostra instància de l'objecte.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>(Okay, it's usually a blessed hashref with Moose, too.)</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>(D'acord, normalment també és una referència beneïda a una taula de dipsersió a Moose).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>=head2 Moose vs old school summary</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>=head2 Resum de Moose contra Perl de la vella escola</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>=item * Class</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>=item * Classe</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A package with no introspection other than mucking about in the symbol
table.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Un paquet sense cap altra introspecció a banda de potinejar la taula de símbols.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With Moose, you get well-defined declaration and introspection.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Amb Moose obteniu una declaració i una introspecció ben definides.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>=item * Attributes</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>=item * Atributs</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Hand-written accessor methods, symbol table hackery, or a helper
module like C&lt;Class::Accessor&gt;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Mètodes accessors escrits a mà, manipulació de la taula de símbols, o un mòdul d'ajuda com ara C&lt;Class::Accessor&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With Moose, these are declaratively defined, and distinct from
methods.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Amb Moose es defineixen d'una forma declarativa i diferent dels mètodes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>=item * Method</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>=item * Mètode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>These are pretty much the same in Moose as in old school Perl.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Són pràcticament iguals a Moose que a Perl de la vella escola.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>=item * Roles</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>=item * Rols</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>C&lt;Class::Trait&gt; or C&lt;Class::Role&gt;, or maybe C&lt;mixin.pm&gt;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>C&lt;Class::Trait&gt; o C&lt;Class::Role&gt;, o potser C&lt;mixin.pm&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With Moose, they're part of the core feature set, and are
introspectable like everything else.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Amb Moose són part central del conjunt de característiques i se'n pot fer introspecció com en qualsevol altra cosa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>=item * Method Modifiers</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>=item * Modificadors de mètode</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Could only be done through serious symbol table wizardry, and you
probably never saw this before (at least in Perl 5).</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Només es podria aconseguir fent màgia amb la taula de símbols, i segurament no ho havíeu vist mai fins ara (si més no a Perl 5).</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>=item * Type</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>=item * Tipus</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Hand-written parameter checking in your C&lt;new()&gt; method and accessors.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Comprovació a mà dels paràmetres als vostres mètodes C&lt;new()&gt; i als accessors.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With Moose, you define types declaratively, and then use them by name
in your attributes.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Amb Moose definiu els tipus de forma declarativa i aleshores els utilitzeu pel nom en els vostres atributs.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>=item * Delegation</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>=item * Delegació</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>C&lt;Class::Delegation&gt; or C&lt;Class::Delegator&gt;, but probably even more
hand-written code.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>C&lt;Class::Delegation&gt; o C&lt;Class::Delegator&gt;, però probablement encara més codi escrit a mà.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With Moose, this is also declarative.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Amb Moose això també és declaratiu.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A C&lt;new()&gt; method which calls C&lt;bless&gt; on a reference.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Un mètode C&lt;new()&gt; que crida C&lt;bless&gt; sobre una referència.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Comes for free when you define a class with Moose.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>És gratis quan definiu una classe amb Moose.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A C&lt;DESTROY()&gt; method.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Un mètode C&lt;DESTROY()&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With Moose, this is called C&lt;DEMOLISH()&gt;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Amb Moose s'anomena C&lt;DEMOLISH()&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>=item * Object Instance</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>=item * Instància de l'objecte</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A blessed reference, usually a hash reference.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Una referència beneïda, normalment una referència a una taula de dispersió.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With Moose, this is an opaque thing which has a bunch of attributes
and methods, as defined by its class.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Amb Moose es tracta d'una cosa opaca que té un seguit d'atributs i mètodes, segons s'hagi definit la classe.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>=item * Immutabilization</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>=item * Immutabilitat</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Moose comes with a feature called &quot;immutabilization&quot;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Moose té una característica anomenada &quot;immutabilitat&quot;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>When you make
your class immutable, it means you're done adding methods, attributes,
roles, etc.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Quan feu la vostra classe immutable, significa que heu acabat d'afegir-hi mètodes, atributs, rols, etc.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This lets Moose optimize your class with a bunch of
extremely dirty in-place code generation tricks that speed up things
like object construction and so on.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Això permet que Moose optimitzi la vostra classe amb un seguit de trucs de generació de codi extremadament bruts que acceleren coses com ara la construcció d'objectes i tota la pesca.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>=head1 META WHAT?</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>=head1 META QUÈ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>A metaclass is a class that describes classes.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Una meta-classe és una classe que descriu d'altres classes.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>With Moose, every class
you define gets a C&lt;meta()&gt; method.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Amb Moose cada classe que definiu té un mètode C&lt;meta()&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>It returns a L&lt;Moose::Meta::Class&gt;
object, which has an introspection API that can tell you about the
class it represents.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Retorna un objecte L&lt;Moose::Meta::Class&gt;, que té una API d'introspecció que us pot parlar sobre la classe que representa.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Almost every concept we defined earlier has a meta class, so we have
L&lt;Moose::Meta::Class&gt;, L&lt;Moose::Meta::Attribute&gt;,
L&lt;Moose::Meta::Method&gt;, L&lt;Moose::Meta::Role&gt;,
L&lt;Moose::Meta::TypeConstraint&gt;, L&lt;Moose::Meta::Instance&gt;, and so on.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Gairebé qualsevol concepte que hem definit fins ara té una meta-classe, així tenim L&lt;Moose::Meta::Class&gt;, L&lt;Moose::Meta::Attribute&gt;, L&lt;Moose::Meta::Method&gt;, L&lt;Moose::Meta::Role&gt;, L&lt;Moose::Meta::TypeConstraint&gt;, L&lt;Moose::Meta::Instance&gt;, etc.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>=head1 BUT I NEED TO DO IT MY WAY!</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>=head1 PERÒ NECESSITO FER-HO A LA MEVA MANERA!</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>One of the great things about Moose is that if you dig down and find
that it does something the &quot;wrong way&quot;, you can change it by extending
a metaclass.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Una de les coses grans de Moose és que si caveu prou fons i trobeu que fa alguna cosa &quot;malament&quot;, podeu canviar-ho extenent una meta-classe.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>For example, you can have arrayref based objects, you can
make your constructors strict (no unknown parameters allowed!), you can
define a naming scheme for attribute accessors, you can make a class a
Singleton, and much, much more.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Per exemple, podeu tenir objectes basats en referències a una matriu, podeu fer que els vostres constructors siguin estrictes (no acceptaran paràmetres desconeguts!), podeu definir l'esquema per anomenar els accessors dels atributs, podeu fer que una classe tingui el patró Singleton i moltíssimes més coses.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Many of these extensions require surprisingly small amounts of code,
and once you've done it once, you'll never have to hand-code &quot;your way
of doing things&quot; again.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Sorprenentment, moltes d'aquestes extensions només necessiten quantitats petites de codi i, un cop ho heu fet una vegada, no us caldrà programar a mà &quot;la vostra manera de fer-ho&quot; mai més.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Instead you'll just load your favorite
extensions.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Només caldrà que carregueu les vostres extensions preferides.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>=head1 WHAT NEXT?</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>=head1 I ARA QUÈ?</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>So you're sold on Moose.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Ja us hem venut Moose.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Time to learn how to really use it.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Ara és hora d'aprendre realment a utilitzar-lo.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you want to see how Moose would translate directly into old school
Perl 5 OO code, check out L&lt;Moose::Manual::Unsweetened&gt;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Si voleu veure com faríeu el que feu amb Moose però amb OO de Perl 5 de la vella escola, feu un cop d'ull a L&lt;Moose::Manual::Unsweetened&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>This might be
helpful for quickly wrapping your brain around some aspects of &quot;the
Moose way&quot;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Això pot ser útil per tal que el vostre cervell s'acostumi a &quot;la manera de Moose&quot; d'enfocar algunes coses.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>Or you can skip that and jump straight to L&lt;Moose::Manual::Classes&gt;
and the rest of the L&lt;Moose::Manual&gt;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>O podeu saltar-vos-ho i saltar directament a L&lt;Moose::Manual::Classes&gt; i la resta del L&lt;Moose::Manual&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>After that we recommend that you start with the L&lt;Moose::Cookbook&gt;.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Després, us recomanem que comenceu amb el L&lt;Moose::Cookbook&gt;.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If
you work your way through all the recipes under the basics section,
you should have a pretty good sense of how Moose works, and all of its
basic OO features.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Si aconseguiu passar més enllà de les receptes de la secció de conceptes bàsics, hauríeu de tenir una bona idea de com funciona Moose i totes les seves característiques d'OO.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>After that, check out the Role recipes.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Després, feu un cop d'ull a les receptes de rols.</seg>
      </tuv>
    </tu>
    <tu>
      <tuv xml:lang="EN-US">
        <seg>If you're really curious, go
on and read the Meta and Extending recipes, but those are mostly there
for people who want to be Moose wizards and change how Moose works.</seg>
      </tuv>
      <tuv xml:lang="CA">
        <seg>Si realment teniu curiositat, seguiu llegint les receptes de Meta i Extending, però aquelles són principalment per volen ser mags de Moose i canviar la manera com funciona Moose.</seg>
      </tuv>
    </tu>
  </body>
</tmx>
